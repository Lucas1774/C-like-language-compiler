
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 15 00:09:26 CEST 2023
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 15 00:09:26 CEST 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\010\002\000\002\056" +
    "\002\000\002\002\004\000\002\057\002\000\002\003\006" +
    "\000\002\004\004\000\002\004\003\000\002\016\004\000" +
    "\002\016\003\000\002\017\006\000\002\020\004\000\002" +
    "\020\003\000\002\021\011\000\002\022\003\000\002\022" +
    "\003\000\002\023\004\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\026\004\000\002\025\004\000" +
    "\002\025\003\000\002\027\004\000\002\005\003\000\002" +
    "\005\004\000\002\011\004\000\002\011\003\000\002\060" +
    "\002\000\002\061\002\000\002\012\014\000\002\062\002" +
    "\000\002\063\002\000\002\012\014\000\002\006\004\000" +
    "\002\006\005\000\002\013\003\000\002\013\003\000\002" +
    "\014\003\000\002\014\005\000\002\015\004\000\002\015" +
    "\004\000\002\007\012\000\002\007\013\000\002\030\003" +
    "\000\002\030\003\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\004\000\002\030\004\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\003\000\002\030\003\000\002\031\006\000\002\032\006" +
    "\000\002\032\005\000\002\051\003\000\002\051\005\000" +
    "\002\033\006\000\002\033\005\000\002\034\004\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\055\004\000\002\055\005\000\002" +
    "\036\005\000\002\037\006\000\002\040\003\000\002\040" +
    "\003\000\002\041\006\000\002\042\011\000\002\042\007" +
    "\000\002\043\012\000\002\044\004\000\002\044\003\000" +
    "\002\045\010\000\002\046\007\000\002\046\003\000\002" +
    "\047\007\000\002\050\004\000\002\052\007\000\002\052" +
    "\007\000\002\053\003\000\002\053\003\000\002\054\003" +
    "\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\014\027\uffff\031\uffff\043\uffff\044\uffff\045" +
    "\uffff\001\002\000\004\002\326\001\002\000\014\027\ufffd" +
    "\031\ufffd\043\ufffd\044\ufffd\045\ufffd\001\002\000\004\002" +
    "\ufffe\001\002\000\014\027\010\031\000\043\000\044\000" +
    "\045\000\001\002\000\004\045\323\001\002\000\014\027" +
    "\010\031\000\043\000\044\000\045\000\001\002\000\012" +
    "\031\000\043\016\044\000\045\000\001\002\000\012\031" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\001\002\000\010\031\036" +
    "\044\034\045\041\001\002\000\030\012\000\031\000\032" +
    "\000\033\000\034\000\035\000\040\000\041\000\043\016" +
    "\044\000\045\000\001\002\000\004\031\020\001\002\000" +
    "\026\012\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\040\ufff5\041\ufff5\044\ufff5\045\ufff5\001\002\000\004\045" +
    "\021\001\002\000\004\010\022\001\002\000\006\045\024" +
    "\046\023\001\002\000\004\011\ufff3\001\002\000\004\011" +
    "\ufff2\001\002\000\004\011\026\001\002\000\004\016\027" +
    "\001\002\000\030\012\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\001\002\000\026\012\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\ufffa\001\002\000" +
    "\006\031\320\044\034\001\002\000\006\037\275\045\274" +
    "\001\002\000\010\031\036\044\034\045\041\001\002\000" +
    "\004\045\057\001\002\000\026\012\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0\044\ufff0\045" +
    "\ufff0\001\002\000\004\002\uffe6\001\002\000\004\045\043" +
    "\001\002\000\004\016\055\001\002\000\010\016\000\017" +
    "\000\024\052\001\002\000\006\016\000\017\046\001\002" +
    "\000\004\016\uffed\001\002\000\004\045\043\001\002\000" +
    "\004\016\uffeb\001\002\000\004\016\uffec\001\002\000\006" +
    "\016\uffea\017\uffea\001\002\000\004\046\054\001\002\000" +
    "\006\016\uffe9\017\uffe9\001\002\000\006\016\uffe8\017\uffe8" +
    "\001\002\000\026\012\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\040\uffee\041\uffee\044\uffee\045\uffee\001\002" +
    "\000\004\016\272\001\002\000\012\014\060\016\000\017" +
    "\000\024\052\001\002\000\010\015\000\031\066\045\061" +
    "\001\002\000\004\045\271\001\002\000\006\015\uffdb\017" +
    "\267\001\002\000\004\015\070\001\002\000\004\015\uffdd" +
    "\001\002\000\004\015\uffdc\001\002\000\004\045\067\001" +
    "\002\000\006\015\uffd9\017\uffd9\001\002\000\004\012\uffe2" +
    "\001\002\000\004\012\072\001\002\000\026\012\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1" +
    "\043\uffe1\045\uffe1\001\002\000\026\012\000\031\000\032" +
    "\000\033\000\034\000\035\000\040\000\041\000\043\016" +
    "\045\000\001\002\000\024\012\075\031\121\032\112\033" +
    "\113\034\104\035\122\040\077\041\115\045\117\001\002" +
    "\000\024\012\075\031\121\032\112\033\113\034\104\035" +
    "\122\040\077\041\115\045\117\001\002\000\026\012\uffbb" +
    "\013\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\045\uffbb\001\002\000\014\014\136\016\257" +
    "\021\145\045\146\046\141\001\002\000\026\012\uffbc\013" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\045\uffbc\001\002\000\024\012\075\031\121\032" +
    "\112\033\113\034\104\035\122\040\077\041\115\045\117" +
    "\001\002\000\006\023\uffb1\024\uffb1\001\002\000\026\012" +
    "\uffbe\013\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\045\uffbe\001\002\000\004\014\227\001" +
    "\002\000\004\016\226\001\002\000\006\023\220\024\221" +
    "\001\002\000\026\012\uffb7\013\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\040\uffb7\041\uffb7\042\uffb7\045\uffb7\001\002" +
    "\000\026\012\uffbf\013\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\045\uffbf\001\002\000\024" +
    "\012\uffc1\013\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\040" +
    "\uffc1\041\uffc1\045\uffc1\001\002\000\004\014\212\001\002" +
    "\000\004\014\204\001\002\000\026\012\uffb8\013\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\045\uffb8\001\002\000\004\014\176\001\002\000\026\012" +
    "\uffb9\013\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\045\uffb9\001\002\000\016\005\134\010" +
    "\132\014\133\023\uffb2\024\uffb2\045\043\001\002\000\026" +
    "\012\uffba\013\uffba\032\uffba\033\uffba\034\uffba\035\uffba\040" +
    "\uffba\041\uffba\042\uffba\045\uffba\001\002\000\004\045\043" +
    "\001\002\000\004\014\172\001\002\000\006\031\uffe0\044" +
    "\uffe0\001\002\000\026\012\uffbd\013\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\040\uffbd\041\uffbd\042\uffbd\045\uffbd\001" +
    "\002\000\026\012\uffc0\013\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0\001\002\000" +
    "\024\012\075\013\131\032\112\033\113\034\104\035\122" +
    "\040\077\041\115\045\130\001\002\000\024\012\uffc2\013" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\040\uffc2\041\uffc2" +
    "\045\uffc2\001\002\000\014\005\134\010\132\014\133\023" +
    "\uffb2\024\uffb2\001\002\000\006\031\uffdf\044\uffdf\001\002" +
    "\000\012\014\136\021\145\045\146\046\141\001\002\000" +
    "\014\014\136\015\140\021\145\045\146\046\141\001\002" +
    "\000\004\016\135\001\002\000\026\012\uffb4\013\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\045\uffb4\001\002\000\012\014\136\021\145\045\146\046" +
    "\141\001\002\000\026\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\015\uffcb\016\uffcb\017\uffcb\022\uffcb\025\uffcb\001" +
    "\002\000\026\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\022\uffc7\025\uffc7\001\002\000" +
    "\026\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\022\uffd5\025\uffd5\001\002\000\022\004" +
    "\151\005\155\006\150\007\154\015\uffc6\017\164\022\152" +
    "\025\153\001\002\000\026\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\011\uffca\015\uffca\016\uffca\017\uffca\022\uffca\025\uffca" +
    "\001\002\000\004\015\163\001\002\000\012\014\136\021" +
    "\145\045\146\046\141\001\002\000\032\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\132\011\uffd4\014\133\015\uffd4\016" +
    "\uffd4\017\uffd4\022\uffd4\025\uffd4\001\002\000\026\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\011\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\022\uffcf\025\uffcf\001\002\000\012\014\136\021\145" +
    "\045\146\046\141\001\002\000\012\014\136\021\145\045" +
    "\146\046\141\001\002\000\012\014\136\021\145\045\146" +
    "\046\141\001\002\000\012\014\136\021\145\045\146\046" +
    "\141\001\002\000\012\014\136\021\145\045\146\046\141" +
    "\001\002\000\026\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\025\uffd0\001\002" +
    "\000\026\004\151\005\155\006\150\007\uffcc\011\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\022\152\025\153\001\002\000\026" +
    "\004\151\005\155\006\150\007\uffce\011\uffce\015\uffce\016" +
    "\uffce\017\uffce\022\uffce\025\uffce\001\002\000\026\004\151" +
    "\005\155\006\150\007\uffcd\011\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\022\uffcd\025\153\001\002\000\026\004\uffd2\005\155" +
    "\006\150\007\uffd2\011\uffd2\015\uffd2\016\uffd2\017\uffd2\022" +
    "\uffd2\025\uffd2\001\002\000\026\004\uffd1\005\155\006\uffd1" +
    "\007\uffd1\011\uffd1\015\uffd1\016\uffd1\017\uffd1\022\uffd1\025" +
    "\uffd1\001\002\000\026\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\011\uffc8\015\uffc8\016\uffc8\017\uffc8\022\uffc8\025\uffc8\001" +
    "\002\000\012\014\136\021\145\045\146\046\141\001\002" +
    "\000\004\015\uffc5\001\002\000\020\004\151\005\155\006" +
    "\150\007\154\015\167\022\152\025\153\001\002\000\026" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\022\uffd3\025\uffd3\001\002\000\020\004\151" +
    "\005\155\006\150\007\154\011\171\022\152\025\153\001" +
    "\002\000\032\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\001\002\000\012\014\136\021\145\045\146\046\141" +
    "\001\002\000\020\004\151\005\155\006\150\007\154\015" +
    "\174\022\152\025\153\001\002\000\022\012\075\032\112" +
    "\033\113\034\104\035\122\040\077\041\115\045\130\001" +
    "\002\000\026\012\uffa7\013\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\040\uffa7\041\uffa7\042\uffa7\045\uffa7\001\002\000" +
    "\012\014\136\021\145\045\146\046\141\001\002\000\020" +
    "\004\151\005\155\006\150\007\154\015\200\022\152\025" +
    "\153\001\002\000\022\012\075\032\112\033\113\034\104" +
    "\035\122\040\077\041\115\045\130\001\002\000\026\012" +
    "\uffae\013\uffae\032\uffae\033\uffae\034\uffae\035\uffae\040\uffae" +
    "\041\uffae\042\202\045\uffae\001\002\000\022\012\075\032" +
    "\112\033\113\034\104\035\122\040\077\041\115\045\130" +
    "\001\002\000\026\012\uffaf\013\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\040\uffaf\041\uffaf\042\uffaf\045\uffaf\001\002" +
    "\000\014\014\136\015\000\021\145\045\146\046\141\001" +
    "\002\000\004\015\210\001\002\000\020\004\151\005\155" +
    "\006\150\007\154\015\uffa0\022\152\025\153\001\002\000" +
    "\004\015\uffa1\001\002\000\004\016\211\001\002\000\026" +
    "\012\uffa4\013\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\045\uffa4\001\002\000\006\015\000" +
    "\047\214\001\002\000\004\015\216\001\002\000\004\015" +
    "\uffa2\001\002\000\004\015\uffa3\001\002\000\004\016\217" +
    "\001\002\000\026\012\uffa5\013\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\040\uffa5\041\uffa5\042\uffa5\045\uffa5\001\002" +
    "\000\012\014\136\021\145\045\146\046\141\001\002\000" +
    "\012\014\136\021\145\045\146\046\141\001\002\000\020" +
    "\004\151\005\155\006\150\007\154\016\223\022\152\025" +
    "\153\001\002\000\026\012\uffb3\013\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\040\uffb3\041\uffb3\042\uffb3\045\uffb3\001" +
    "\002\000\020\004\151\005\155\006\150\007\154\016\225" +
    "\022\152\025\153\001\002\000\026\012\uffb0\013\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\045\uffb0\001\002\000\026\012\uffa6\013\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\040\uffa6\041\uffa6\042\uffa6\045\uffa6" +
    "\001\002\000\012\014\136\021\145\045\146\046\141\001" +
    "\002\000\020\004\151\005\155\006\150\007\154\015\231" +
    "\022\152\025\153\001\002\000\004\012\232\001\002\000" +
    "\004\026\235\001\002\000\010\013\000\026\235\036\244" +
    "\001\002\000\010\013\uffab\026\uffab\036\uffab\001\002\000" +
    "\004\046\236\001\002\000\004\020\237\001\002\000\004" +
    "\012\075\001\002\000\004\030\241\001\002\000\004\016" +
    "\242\001\002\000\010\013\uffaa\026\uffaa\036\uffaa\001\002" +
    "\000\004\013\253\001\002\000\004\020\247\001\002\000" +
    "\010\013\uffac\026\uffac\036\uffac\001\002\000\004\013\uffa8" +
    "\001\002\000\004\012\075\001\002\000\004\030\251\001" +
    "\002\000\004\016\252\001\002\000\004\013\uffa9\001\002" +
    "\000\026\012\uffad\013\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\040\uffad\041\uffad\042\uffad\045\uffad\001\002\000\026" +
    "\012\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\040" +
    "\ufff1\041\ufff1\044\ufff1\045\ufff1\001\002\000\024\012\075" +
    "\013\256\032\112\033\113\034\104\035\122\040\077\041" +
    "\115\045\130\001\002\000\006\031\uffde\044\uffde\001\002" +
    "\000\026\012\uffb6\013\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\045\uffb6\001\002\000\020" +
    "\004\151\005\155\006\150\007\154\016\261\022\152\025" +
    "\153\001\002\000\026\012\uffb5\013\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\040\uffb5\041\uffb5\042\uffb5\045\uffb5\001" +
    "\002\000\024\012\075\031\121\032\112\033\113\034\104" +
    "\035\122\040\077\041\115\045\117\001\002\000\024\012" +
    "\075\013\264\032\112\033\113\034\104\035\122\040\077" +
    "\041\115\045\130\001\002\000\030\012\uffc3\013\uffc3\030" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\045\uffc3\001\002\000\024\012\075\013\266\032" +
    "\112\033\113\034\104\035\122\040\077\041\115\045\130" +
    "\001\002\000\030\012\uffc4\013\uffc4\030\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\040\uffc4\041\uffc4\042\uffc4\045\uffc4" +
    "\001\002\000\006\031\066\045\061\001\002\000\004\015" +
    "\uffda\001\002\000\006\015\uffd8\017\uffd8\001\002\000\026" +
    "\012\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\040" +
    "\uffef\041\uffef\044\uffef\045\uffef\001\002\000\004\002\ufffb" +
    "\001\002\000\004\014\307\001\002\000\004\014\276\001" +
    "\002\000\004\015\277\001\002\000\004\012\300\001\002" +
    "\000\026\012\000\031\000\032\000\033\000\034\000\035" +
    "\000\040\000\041\000\043\016\045\000\001\002\000\024" +
    "\012\075\031\121\032\112\033\113\034\104\035\122\040" +
    "\077\041\115\045\117\001\002\000\024\012\075\031\121" +
    "\032\112\033\113\034\104\035\122\040\077\041\115\045" +
    "\117\001\002\000\024\012\075\013\304\032\112\033\113" +
    "\034\104\035\122\040\077\041\115\045\130\001\002\000" +
    "\004\002\uffd7\001\002\000\024\012\075\013\306\032\112" +
    "\033\113\034\104\035\122\040\077\041\115\045\130\001" +
    "\002\000\004\002\uffd6\001\002\000\010\015\000\031\066" +
    "\045\061\001\002\000\004\015\311\001\002\000\004\012" +
    "\uffe5\001\002\000\004\012\313\001\002\000\026\012\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\040\uffe4\041" +
    "\uffe4\043\uffe4\045\uffe4\001\002\000\026\012\000\031\000" +
    "\032\000\033\000\034\000\035\000\040\000\041\000\043" +
    "\016\045\000\001\002\000\024\012\075\031\121\032\112" +
    "\033\113\034\104\035\122\040\077\041\115\045\117\001" +
    "\002\000\006\031\uffe3\044\uffe3\001\002\000\004\002\uffe7" +
    "\001\002\000\004\045\321\001\002\000\004\014\060\001" +
    "\002\000\012\031\ufff9\043\ufff9\044\ufff9\045\ufff9\001\002" +
    "\000\004\046\324\001\002\000\004\016\325\001\002\000" +
    "\014\027\ufff7\031\ufff7\043\ufff7\044\ufff7\045\ufff7\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\002\003\056\004\001\001\000\002\001" +
    "\001\000\006\003\005\057\006\001\001\000\002\001\001" +
    "\000\010\010\012\016\011\017\010\001\001\000\002\001" +
    "\001\000\010\010\012\016\321\017\010\001\001\000\010" +
    "\010\016\020\013\021\014\001\001\000\002\001\001\000" +
    "\016\004\030\007\037\011\031\012\032\023\034\024\036" +
    "\001\001\000\010\010\016\020\027\021\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\037\011\316\012\032\001\001\000\002" +
    "\001\001\000\012\007\037\011\272\012\032\024\253\001" +
    "\001\000\006\026\055\027\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\041\027\043\001\001\000" +
    "\002\001\001\000\006\005\050\010\052\001\001\000\006" +
    "\010\046\025\044\001\001\000\002\001\001\000\006\026" +
    "\047\027\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\050\010\052\001\001\000\012\010\064\013\062\014" +
    "\063\015\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\070\001\001" +
    "\000\002\001\001\000\004\063\072\001\001\000\010\010" +
    "\016\020\073\021\014\001\001\000\046\006\122\023\100" +
    "\024\036\031\101\032\104\033\106\034\125\035\110\036" +
    "\107\037\102\040\105\041\123\042\077\043\075\047\117" +
    "\050\115\052\113\055\124\001\001\000\044\023\261\024" +
    "\036\031\101\032\104\033\106\034\262\035\110\036\107" +
    "\037\102\040\105\041\123\042\077\043\075\047\117\050" +
    "\115\052\113\055\124\001\001\000\002\001\001\000\010" +
    "\030\257\031\136\032\142\001\001\000\002\001\001\000" +
    "\042\024\253\031\101\032\104\033\106\034\254\035\110" +
    "\036\107\037\102\040\105\041\123\042\077\043\075\047" +
    "\117\050\115\052\113\055\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\041" +
    "\027\043\001\001\000\002\001\001\000\006\026\055\027" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\031\101\032\104\033" +
    "\106\035\126\036\107\037\102\040\105\041\123\042\077" +
    "\043\075\047\117\050\115\052\113\055\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\167\031\136\032\142\001\001\000\012\030\141\031" +
    "\136\032\142\051\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\165\031\136\032\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\146\031\136\032\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\161\031\136\032\142\001\001\000" +
    "\010\030\160\031\136\032\142\001\001\000\010\030\157" +
    "\031\136\032\142\001\001\000\010\030\156\031\136\032" +
    "\142\001\001\000\010\030\155\031\136\032\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\141\031\136\032\142\051\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\172\031" +
    "\136\032\142\001\001\000\002\001\001\000\036\031\101" +
    "\032\104\033\106\035\174\036\107\037\102\040\105\041" +
    "\123\042\077\043\075\047\117\050\115\052\113\055\124" +
    "\001\001\000\002\001\001\000\010\030\176\031\136\032" +
    "\142\001\001\000\002\001\001\000\036\031\101\032\104" +
    "\033\106\035\200\036\107\037\102\040\105\041\123\042" +
    "\077\043\075\047\117\050\115\052\113\055\124\001\001" +
    "\000\002\001\001\000\036\031\101\032\104\033\106\035" +
    "\202\036\107\037\102\040\105\041\123\042\077\043\075" +
    "\047\117\050\115\052\113\055\124\001\001\000\002\001" +
    "\001\000\014\010\206\030\205\031\136\032\142\054\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\214" +
    "\053\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\223\031\136\032\142\001\001\000\010\030\221\031" +
    "\136\032\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\227\031\136\032\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\232\045\233\001\001\000" +
    "\010\010\245\045\244\046\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\031\101\032\104\033\106\035\126" +
    "\036\107\037\102\040\105\041\123\042\077\043\075\047" +
    "\117\050\115\052\113\055\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\024\253\031\101\032\104\033\106\034\264\035\110" +
    "\036\107\037\102\040\105\041\123\042\077\043\075\047" +
    "\117\050\115\052\113\055\124\001\001\000\036\031\101" +
    "\032\104\033\106\035\126\036\107\037\102\040\105\041" +
    "\123\042\077\043\075\047\117\050\115\052\113\055\124" +
    "\001\001\000\002\001\001\000\036\031\101\032\104\033" +
    "\106\035\126\036\107\037\102\040\105\041\123\042\077" +
    "\043\075\047\117\050\115\052\113\055\124\001\001\000" +
    "\002\001\001\000\006\014\267\015\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\016\020\300\021\014\001" +
    "\001\000\044\023\301\024\036\031\101\032\104\033\106" +
    "\034\302\035\110\036\107\037\102\040\105\041\123\042" +
    "\077\043\075\047\117\050\115\052\113\055\124\001\001" +
    "\000\042\024\253\031\101\032\104\033\106\034\304\035" +
    "\110\036\107\037\102\040\105\041\123\042\077\043\075" +
    "\047\117\050\115\052\113\055\124\001\001\000\036\031" +
    "\101\032\104\033\106\035\126\036\107\037\102\040\105" +
    "\041\123\042\077\043\075\047\117\050\115\052\113\055" +
    "\124\001\001\000\002\001\001\000\036\031\101\032\104" +
    "\033\106\035\126\036\107\037\102\040\105\041\123\042" +
    "\077\043\075\047\117\050\115\052\113\055\124\001\001" +
    "\000\002\001\001\000\012\010\064\013\307\014\063\015" +
    "\061\001\001\000\002\001\001\000\004\060\311\001\001" +
    "\000\002\001\001\000\004\061\313\001\001\000\010\010" +
    "\016\020\314\021\014\001\001\000\046\006\315\023\100" +
    "\024\036\031\101\032\104\033\106\034\125\035\110\036" +
    "\107\037\102\040\105\041\123\042\077\043\075\047\117" +
    "\050\115\052\113\055\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();

	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}

	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	public SymbolIF checkIfExistsSymbolWithinOpenScopes (Token token, boolean iWantIt){
		List<ScopeIF> scopes = scopeManager.getOpenScopes();
		for (int i = 0; i < scopes.size(); i++){
			ScopeIF scope = scopes.get(i);
			if (iWantIt && !scope.getSymbolTable().containsSymbol(token.getLexema())){
				semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " no declarado");
			} else if (!iWantIt && scope.getSymbolTable().containsSymbol(token.getLexema())){
				semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " ya declarado");
			} else if (iWantIt && scope.getSymbolTable().containsSymbol(token.getLexema())){
				return scope.getSymbolTable().getSymbol(token.getLexema());
			}
		}
		return null;
	}

	public TypeIF checkIfExistsTypeWithinOpenScopes (Token token, boolean iWantIt){
		List<ScopeIF> scopes = scopeManager.getOpenScopes();
		for (int i = 0; i < scopes.size(); i++){
			ScopeIF scope = scopes.get(i);
			if (iWantIt && !scope.getTypeTable().containsType(token.getLexema())){
				semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " tipo " + token.getLexema() + " no declarado");
			} else if (!iWantIt && scope.getTypeTable().containsType(token.getLexema())){
				semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " tipo " + token.getLexema() + " ya declarado");
			} else if (iWantIt && scope.getTypeTable().containsType(token.getLexema())){
				return scope.getTypeTable().getType(token.getLexema());
			}
		}
		return null;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opcionesEscribeEnt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opcionesEscribeEnt ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opcionesEscribe ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opcionesEscribe ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciaSalida ::= ESCRIBE_ENT OPEN_KEY opcionesEscribeEnt CLOSE_KEY SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentenciaSalida ::= ESCRIBE OPEN_KEY opcionesEscribe CLOSE_KEY SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaLlamadaFuncion ::= llamadaFuncion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaLlamadaFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaMientras ::= MIENTRAS OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // porDefecto ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // porDefecto ::= PORDEFECTO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // casoAlt ::= CASO NUMERO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // casosAlternativa ::= casoAlt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // casosAlternativa ::= casosAlternativa casoAlt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaAlternativas ::= ALTENATIVAS OPEN_KEY expresion CLOSE_KEY OPEN_PARENTHESIS casosAlternativa porDefecto CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia SINO sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaAsignacionSuma ::= ref ASSIGN_SUMA expresion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionSuma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ref ::= accesoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ref ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaAsignacion ::= ref ASSIGN expresion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaIncremento ::= IDENTIFICADOR AUTO_INCREMENTO SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIncremento",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaDevuelve ::= DEVUELVE expresion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciaDevuelve ::= DEVUELVE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= bloque 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= sentenciaSalida 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= sentenciaMientras 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= sentenciaAlternativas 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= sentenciaSi 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentenciaAsignacionSuma 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= sentenciaAsignacion 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= sentenciaIncremento 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= sentenciaDevuelve 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listadoSentencias ::= sentencia 
            {
              ArrayList<Sentencia> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listadoSentencias ::= listadoSentencias sentencia 
            {
              ArrayList<Sentencia> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque ::= OPEN_PARENTHESIS listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque ::= OPEN_PARENTHESIS seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros ::= expresion COLON parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY CLOSE_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY parametros CLOSE_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // accesoVector ::= IDENTIFICADOR OPEN_BRACKET expresion CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= accesoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion AND_LOGICA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion EQUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion LOWER_THAN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= NEGACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion AUTO_INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion MULT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion PLUS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= OPEN_KEY expresion CLOSE_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS seccionTipos seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolProcedure newSymbol = new SymbolProcedure(scope, p.getLexema(), scopeManager.searchType("void"), new ArrayList<Parametro>());
	scope.getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS seccionTipos listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolProcedure newSymbol = new SymbolProcedure(scope, p.getLexema(), scopeManager.searchType("void"), new ArrayList<Parametro>());
	scope.getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	TypeIF type = checkIfExistsTypeWithinOpenScopes(identifier, true);
	Parametro param = new Parametro(type.getName(), name.getLexema());
	RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametro ::= ENTERO IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Parametro param = new Parametro("int", name.getLexema());
	RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionParametros ::= parametro COLON declaracionParametros 
            {
              ArrayList<Parametro> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	params.add(param);
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionParametros ::= parametro 
            {
              ArrayList<Parametro> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Parametro> params = new ArrayList();
	params.add(param);
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // seccionParametros ::= epsilon 
            {
              ArrayList<Parametro> RESULT =null;
		
	ArrayList<Parametro> params = new ArrayList();
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // seccionParametros ::= declaracionParametros 
            {
              ArrayList<Parametro> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcion1 ::= seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		
	scopeManager.closeScope();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion1 ::= listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		
	scopeManager.closeScope();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion ::= ENTERO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY NT$4 OPEN_PARENTHESIS NT$5 seccionTipos funcion1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

	scopeManager.openScope();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

	ScopeIF scope = scopeManager.getCurrentScope();
	checkIfExistsSymbolWithinOpenScopes(identifier, false);
	SymbolFunction newSymbol = new SymbolFunction(scope, identifier.getLexema(), scopeManager.searchType("int"), params);
	scope.getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion ::= VACIO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY NT$2 OPEN_PARENTHESIS NT$3 seccionTipos funcion1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

	scopeManager.openScope();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

	ScopeIF scope = scopeManager.getCurrentScope();
	checkIfExistsSymbolWithinOpenScopes(identifier,  false);
	SymbolProcedure newSymbol = new SymbolProcedure(scope, identifier.getLexema(), scopeManager.searchType("void"), params);
	scope.getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // seccionFunciones ::= funcionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionFunciones ::= funcion seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id1 ::= ASSIGN NUMERO 
            {
              Id1 RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Id1 declaration = new Id1(true, Integer.parseInt(n.getLexema()));
	RESULT = declaration;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id1 ::= epsilon 
            {
              Id1 RESULT =null;
		
	Id1 declaration = new Id1(false, 0);
	RESULT = declaration;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id ::= IDENTIFICADOR id1 
            {
              Id RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id1 declaration = (Id1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	checkIfExistsSymbolWithinOpenScopes(identifier, false);
	Id fullDeclaration = new Id (identifier.getLexema(), declaration.hasAssignmentValue(), declaration.getValue());
	RESULT = fullDeclaration;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listadoIDs1 ::= epsilon 
            {
              ArrayList<Id> RESULT =null;
		
	ArrayList<Id> emptyList = new ArrayList();
	RESULT = emptyList;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listadoIDs1 ::= COLON listadoIDs 
            {
              ArrayList<Id> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIDs ::= id listadoIDs1 
            {
              ArrayList<Id> RESULT =null;
		int fullDeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fullDeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Id fullDeclaration = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int restOfDeclarationsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restOfDeclarationsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Id> restOfDeclarations = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	restOfDeclarations.add(fullDeclaration);
	RESULT = restOfDeclarations;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVariable ::= IDENTIFICADOR listadoIDs SEMI_COLON 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	TypeIF type = checkIfExistsTypeWithinOpenScopes(identifier, true);
	for (int i = 0; i < list.size(); i++){
		if (list.get(i).hasAssignmentValue()){ // if is being tried to be assigned
			semanticErrorManager.semanticFatalError("Linea " + identifier.getLine() + " " + list.get(i).getName() + " no puede ser inicializado");
		}
		SymbolVariable<ArrayList> newSymbol = new SymbolVariable(scope, list.get(i).getName(), type, null);
		scope.getSymbolTable().addSymbol(newSymbol);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= ENTERO listadoIDs SEMI_COLON 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	for (int i = 0; i < list.size(); i++){
		SymbolVariable<Integer> newSymbol = list.get(i).hasAssignmentValue() ?
			new SymbolVariable(scope, list.get(i).getName(), scopeManager.searchType("int"), list.get(i).getValue()) :
			new SymbolVariable(scope, list.get(i).getName(), scopeManager.searchType("int"), null);
		scope.getSymbolTable().addSymbol(newSymbol);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seccionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tamTipo ::= IDENTIFICADOR 
            {
              TamTipo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	SymbolIF symbol = checkIfExistsSymbolWithinOpenScopes(s, true);
	if (!symbol.getType().getName().equals("int")){ // if it exists but it is not an integer
		semanticErrorManager.semanticFatalError("Linea " + s.getLine() + " Columna " + s.getColumn() + " objeto " + s.getLexema() + " no es de tipo entero");
	}
	String value = ((SymbolConstant)symbol).getValue().toString();
	if (Integer.parseInt(value) <= 0){ // if it exists and it is an integer but it is not positive
		semanticErrorManager.semanticFatalError("Linea " + s.getLine() + " Columna " + s.getColumn() + " valor " + s.getLexema() + " fuera del rango");
	}
	TamTipo tamTipo = new TamTipo(((SymbolConstant)symbol).getValue().toString());
	RESULT = tamTipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tamTipo ::= NUMERO 
            {
              TamTipo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	if (Integer.parseInt(n.getLexema()) <= 0){ // if it is not positive
		semanticErrorManager.semanticFatalError("Linea " + n.getLine() + " Columna " + n.getColumn() + " valor " + n.getLexema() + " fuera del rango");
	}
	TamTipo tamTipo = new TamTipo(n.getLexema());
	RESULT = tamTipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionTipo ::= TIPO ENTERO IDENTIFICADOR OPEN_BRACKET tamTipo CLOSE_BRACKET SEMI_COLON 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TamTipo tamTipo = (TamTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	checkIfExistsSymbolWithinOpenScopes(identifier, false);
	TypeArray typeArray = new TypeArray(scope, identifier.getLexema(), Integer.parseInt(tamTipo.getValue()));
	scope.getTypeTable().addType(typeArray);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionTipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionTipos ::= declaracionTipo seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= CONSTANTE IDENTIFICADOR NUMERO SEMI_COLON 
            {
              DeclaracionConstante RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ScopeIF scope = scopeManager.getCurrentScope();
	checkIfExistsSymbolWithinOpenScopes(name, false);
	SymbolConstant<Integer> newSymbol = new SymbolConstant<Integer>(scope, name.getLexema(), scopeManager.searchType("int"), Integer.parseInt(value.getLexema()));
	scope.getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccionConstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccionConstantes ::= declaracionConstante seccionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // axiom1 ::= seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom1 ::= seccionVariables seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= NT$1 seccionConstantes seccionTipos axiom1 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Axiom RESULT =null;

	scopeManager.openScope("global");

	ScopeIF scope = scopeManager.getCurrentScope();
	scope.getTypeTable().addType(new TypeSimple(scope, "void"));
	scope.getTypeTable().addType(new TypeSimple(scope, "int"));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
		
		//List intermediateCode = ax.getIntermediateCode ();
		//finalCodeFactory.create (intermediateCode);

		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
		// aún no se tendrá implementada la generación de código intermedio ni final.
		// Para la entrega final deberán descomentarse y usarse.
		List<ScopeIF> scopesList = scopeManager.getAllScopes(); // for debugging purposes
		for (int j = 0; j < scopesList.size(); j++){
			ScopeIF current = scopesList.get(j);
			List myList = new ArrayList<TypeIF>(current.getTypeTable().getTypes());
			for (int i = 0; i < myList.size(); i++){
				System.out.println(myList.get(i));
			}
			List myList2 = new ArrayList<SymbolIF>(current.getSymbolTable().getSymbols()); 
			for (int i = 0; i < myList2.size(); i++){
				System.out.println(myList2.get(i));
			}
		}
		scopeManager.closeScope();
		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
 
    syntaxErrorManager.syntaxInfo ("Starting parsing...");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

