
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 03 14:27:09 CEST 2023
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 03 14:27:09 CEST 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\010\002\000\002\060" +
    "\002\000\002\002\004\000\002\061\002\000\002\003\006" +
    "\000\002\004\004\000\002\004\003\000\002\017\004\000" +
    "\002\017\003\000\002\020\006\000\002\021\004\000\002" +
    "\021\003\000\002\022\011\000\002\023\003\000\002\023" +
    "\003\000\002\024\004\000\002\024\003\000\002\025\005" +
    "\000\002\025\005\000\002\027\004\000\002\026\004\000" +
    "\002\026\003\000\002\030\004\000\002\005\003\000\002" +
    "\005\004\000\002\011\004\000\002\011\003\000\002\062" +
    "\002\000\002\012\013\000\002\063\002\000\002\012\013" +
    "\000\002\013\004\000\002\013\005\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\005\000\002" +
    "\016\004\000\002\016\004\000\002\064\002\000\002\006" +
    "\011\000\002\007\006\000\002\007\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\004\000\002\031\004\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\003\000\002\031\003\000\002\032\006\000\002\052\004" +
    "\000\002\033\006\000\002\033\005\000\002\053\003\000" +
    "\002\053\005\000\002\065\002\000\002\034\005\000\002" +
    "\035\005\000\002\035\004\000\002\036\004\000\002\036" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\057\004\000\002\057\005\000\002\040" +
    "\005\000\002\041\006\000\002\043\006\000\002\042\003" +
    "\000\002\042\003\000\002\044\011\000\002\044\007\000" +
    "\002\066\002\000\002\045\013\000\002\046\004\000\002" +
    "\046\003\000\002\047\010\000\002\050\007\000\002\050" +
    "\003\000\002\067\002\000\002\051\010\000\002\054\007" +
    "\000\002\070\002\000\002\054\010\000\002\055\003\000" +
    "\002\055\003\000\002\056\003\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\014\027\uffff\031\uffff\043\uffff\044\uffff\045" +
    "\uffff\001\002\000\004\002\333\001\002\000\014\027\ufffd" +
    "\031\ufffd\043\ufffd\044\ufffd\045\ufffd\001\002\000\004\002" +
    "\ufffe\001\002\000\014\027\010\031\000\043\000\044\000" +
    "\045\000\001\002\000\004\045\330\001\002\000\014\027" +
    "\010\031\000\043\000\044\000\045\000\001\002\000\012" +
    "\031\000\043\016\044\000\045\000\001\002\000\012\031" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\001\002\000\010\031\036" +
    "\044\035\045\041\001\002\000\030\012\000\031\000\032" +
    "\000\033\000\034\000\035\000\040\000\041\000\043\016" +
    "\044\000\045\000\001\002\000\004\031\020\001\002\000" +
    "\026\012\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\040\ufff5\041\ufff5\044\ufff5\045\ufff5\001\002\000\004\045" +
    "\021\001\002\000\004\010\022\001\002\000\006\045\024" +
    "\046\023\001\002\000\004\011\ufff3\001\002\000\004\011" +
    "\ufff2\001\002\000\004\011\026\001\002\000\004\016\027" +
    "\001\002\000\030\012\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\001\002\000\026\012\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\ufffa\001\002\000" +
    "\006\031\325\044\035\001\002\000\010\031\036\044\035" +
    "\045\041\001\002\000\006\037\300\045\277\001\002\000" +
    "\004\045\057\001\002\000\026\012\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0\044\ufff0\045" +
    "\ufff0\001\002\000\004\002\uffe6\001\002\000\004\045\043" +
    "\001\002\000\004\016\055\001\002\000\010\016\000\017" +
    "\000\024\052\001\002\000\006\016\000\017\046\001\002" +
    "\000\004\016\uffed\001\002\000\004\045\043\001\002\000" +
    "\004\016\uffeb\001\002\000\004\016\uffec\001\002\000\006" +
    "\016\uffea\017\uffea\001\002\000\004\046\054\001\002\000" +
    "\006\016\uffe9\017\uffe9\001\002\000\006\016\uffe8\017\uffe8" +
    "\001\002\000\026\012\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\040\uffee\041\uffee\044\uffee\045\uffee\001\002" +
    "\000\004\016\276\001\002\000\012\014\060\016\000\017" +
    "\000\024\052\001\002\000\010\015\000\031\066\045\061" +
    "\001\002\000\004\045\275\001\002\000\006\015\uffdd\017" +
    "\273\001\002\000\004\015\070\001\002\000\004\015\uffdf" +
    "\001\002\000\004\015\uffde\001\002\000\004\045\067\001" +
    "\002\000\006\015\uffdb\017\uffdb\001\002\000\004\012\071" +
    "\001\002\000\026\012\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\040\uffe3\041\uffe3\043\uffe3\045\uffe3\001\002" +
    "\000\026\012\000\031\000\032\000\033\000\034\000\035" +
    "\000\040\000\041\000\043\016\045\000\001\002\000\024" +
    "\012\074\031\120\032\111\033\113\034\102\035\121\040" +
    "\077\041\114\045\116\001\002\000\024\012\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\040\uffc3\041\uffc3\045" +
    "\uffc3\001\002\000\026\012\uffb8\013\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\040\uffb8\041\uffb8\042\uffb8\045\uffb8\001" +
    "\002\000\026\012\uffb9\013\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\040\uffb9\041\uffb9\042\uffb9\045\uffb9\001\002\000" +
    "\014\014\135\016\261\021\144\045\145\046\140\001\002" +
    "\000\024\012\074\031\120\032\111\033\113\034\102\035" +
    "\121\040\077\041\114\045\116\001\002\000\006\023\uffad" +
    "\024\uffad\001\002\000\004\014\230\001\002\000\026\012" +
    "\uffbb\013\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\045\uffbb\001\002\000\004\016\227\001" +
    "\002\000\006\023\221\024\222\001\002\000\026\012\uffb4" +
    "\013\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\045\uffb4\001\002\000\026\012\uffbc\013\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\045\uffbc\001\002\000\024\012\uffbe\013\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041\uffbe\045\uffbe\001" +
    "\002\000\004\014\213\001\002\000\026\012\uffb5\013\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\045\uffb5\001\002\000\004\014\204\001\002\000\004" +
    "\014\176\001\002\000\026\012\uffb6\013\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\040\uffb6\041\uffb6\042\uffb6\045\uffb6" +
    "\001\002\000\016\005\133\010\131\014\132\023\uffae\024" +
    "\uffae\045\043\001\002\000\026\012\uffb7\013\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\040\uffb7\041\uffb7\042\uffb7\045" +
    "\uffb7\001\002\000\004\045\043\001\002\000\004\014\171" +
    "\001\002\000\006\031\uffe2\044\uffe2\001\002\000\026\012" +
    "\uffba\013\uffba\032\uffba\033\uffba\034\uffba\035\uffba\040\uffba" +
    "\041\uffba\042\uffba\045\uffba\001\002\000\026\012\uffbd\013" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\045\uffbd\001\002\000\024\012\074\013\130\032" +
    "\111\033\113\034\102\035\121\040\077\041\114\045\127" +
    "\001\002\000\024\012\uffbf\013\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\040\uffbf\041\uffbf\045\uffbf\001\002\000\014" +
    "\005\133\010\131\014\132\023\uffae\024\uffae\001\002\000" +
    "\006\031\uffe1\044\uffe1\001\002\000\012\014\135\021\144" +
    "\045\145\046\140\001\002\000\014\014\135\015\137\021" +
    "\144\045\145\046\140\001\002\000\004\016\134\001\002" +
    "\000\026\012\uffb1\013\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\045\uffb1\001\002\000\012" +
    "\014\135\021\144\045\145\046\140\001\002\000\026\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\022\uffcb\025\uffcb\001\002\000\026\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\011\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\022\uffc6\025\uffc6\001\002\000\026\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\011\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5" +
    "\025\uffd5\001\002\000\022\004\150\005\154\006\147\007" +
    "\153\015\uffc5\017\163\022\151\025\152\001\002\000\026" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\015\uffca\016" +
    "\uffca\017\uffca\022\uffca\025\uffca\001\002\000\004\015\162" +
    "\001\002\000\012\014\135\021\144\045\145\046\140\001" +
    "\002\000\032\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\131" +
    "\011\uffd4\014\132\015\uffd4\016\uffd4\017\uffd4\022\uffd4\025" +
    "\uffd4\001\002\000\026\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\015\uffcf\016\uffcf\017\uffcf\022\uffcf\025\uffcf\001" +
    "\002\000\012\014\135\021\144\045\145\046\140\001\002" +
    "\000\012\014\135\021\144\045\145\046\140\001\002\000" +
    "\012\014\135\021\144\045\145\046\140\001\002\000\012" +
    "\014\135\021\144\045\145\046\140\001\002\000\012\014" +
    "\135\021\144\045\145\046\140\001\002\000\026\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\011\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\022\uffd0\025\uffd0\001\002\000\026\004\150\005\154" +
    "\006\147\007\uffcc\011\uffcc\015\uffcc\016\uffcc\017\uffcc\022" +
    "\151\025\152\001\002\000\026\004\150\005\154\006\147" +
    "\007\uffce\011\uffce\015\uffce\016\uffce\017\uffce\022\uffce\025" +
    "\uffce\001\002\000\026\004\150\005\154\006\147\007\uffcd" +
    "\011\uffcd\015\uffcd\016\uffcd\017\uffcd\022\uffcd\025\152\001" +
    "\002\000\026\004\uffd2\005\154\006\147\007\uffd2\011\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\022\uffd2\025\uffd2\001\002\000" +
    "\026\004\uffd1\005\154\006\uffd1\007\uffd1\011\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\022\uffd1\025\uffd1\001\002\000\026\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\022\uffc7\025\uffc7\001\002\000\012\014\135\021" +
    "\144\045\145\046\140\001\002\000\004\015\uffc4\001\002" +
    "\000\020\004\150\005\154\006\147\007\153\015\166\022" +
    "\151\025\152\001\002\000\026\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\011\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3\025" +
    "\uffd3\001\002\000\020\004\150\005\154\006\147\007\153" +
    "\011\170\022\151\025\152\001\002\000\032\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\011\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\001\002\000\012\014" +
    "\135\021\144\045\145\046\140\001\002\000\020\004\150" +
    "\005\154\006\147\007\153\015\uffa3\022\151\025\152\001" +
    "\002\000\004\015\174\001\002\000\022\012\074\032\111" +
    "\033\113\034\102\035\121\040\077\041\114\045\127\001" +
    "\002\000\026\012\uffa2\013\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\040\uffa2\041\uffa2\042\uffa2\045\uffa2\001\002\000" +
    "\012\014\135\021\144\045\145\046\140\001\002\000\020" +
    "\004\150\005\154\006\147\007\153\015\200\022\151\025" +
    "\152\001\002\000\022\012\074\032\111\033\113\034\102" +
    "\035\121\040\077\041\114\045\127\001\002\000\026\012" +
    "\uffab\013\uffab\032\uffab\033\uffab\034\uffab\035\uffab\040\uffab" +
    "\041\uffab\042\202\045\uffab\001\002\000\022\012\074\032" +
    "\111\033\113\034\102\035\121\040\077\041\114\045\127" +
    "\001\002\000\026\012\uffac\013\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\040\uffac\041\uffac\042\uffac\045\uffac\001\002" +
    "\000\014\014\135\015\000\021\144\045\145\046\140\001" +
    "\002\000\004\015\uffa0\001\002\000\020\004\150\005\154" +
    "\006\147\007\153\015\uff9b\022\151\025\152\001\002\000" +
    "\004\015\uff9c\001\002\000\004\015\211\001\002\000\004" +
    "\016\212\001\002\000\026\012\uff9f\013\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\040\uff9f\041\uff9f\042\uff9f\045\uff9f" +
    "\001\002\000\006\015\000\047\215\001\002\000\004\015" +
    "\217\001\002\000\004\015\uff9d\001\002\000\004\015\uff9e" +
    "\001\002\000\004\016\220\001\002\000\026\012\uffa1\013" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\045\uffa1\001\002\000\012\014\135\021\144\045" +
    "\145\046\140\001\002\000\012\014\135\021\144\045\145" +
    "\046\140\001\002\000\020\004\150\005\154\006\147\007" +
    "\153\016\224\022\151\025\152\001\002\000\026\012\uffb0" +
    "\013\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\045\uffb0\001\002\000\020\004\150\005\154" +
    "\006\147\007\153\016\226\022\151\025\152\001\002\000" +
    "\026\012\uffaf\013\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\045\uffaf\001\002\000\026\012" +
    "\uffc8\013\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\045\uffc8\001\002\000\012\014\135\021" +
    "\144\045\145\046\140\001\002\000\020\004\150\005\154" +
    "\006\147\007\153\015\uffaa\022\151\025\152\001\002\000" +
    "\004\015\233\001\002\000\004\012\234\001\002\000\004" +
    "\026\237\001\002\000\010\013\000\026\237\036\246\001" +
    "\002\000\010\013\uffa7\026\uffa7\036\uffa7\001\002\000\004" +
    "\046\240\001\002\000\004\020\241\001\002\000\004\012" +
    "\074\001\002\000\004\030\243\001\002\000\004\016\244" +
    "\001\002\000\010\013\uffa6\026\uffa6\036\uffa6\001\002\000" +
    "\004\013\255\001\002\000\004\020\251\001\002\000\010" +
    "\013\uffa8\026\uffa8\036\uffa8\001\002\000\004\013\uffa4\001" +
    "\002\000\004\012\074\001\002\000\004\030\253\001\002" +
    "\000\004\016\254\001\002\000\004\013\uffa5\001\002\000" +
    "\026\012\uffa9\013\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\045\uffa9\001\002\000\026\012" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1" +
    "\041\ufff1\044\ufff1\045\ufff1\001\002\000\024\012\074\013" +
    "\260\032\111\033\113\034\102\035\121\040\077\041\114" +
    "\045\127\001\002\000\006\031\uffe0\044\uffe0\001\002\000" +
    "\026\012\uffb3\013\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\045\uffb3\001\002\000\020\004" +
    "\150\005\154\006\147\007\153\016\263\022\151\025\152" +
    "\001\002\000\026\012\uffb2\013\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\040\uffb2\041\uffb2\042\uffb2\045\uffb2\001\002" +
    "\000\024\012\074\031\120\032\111\033\113\034\102\035" +
    "\121\040\077\041\114\045\116\001\002\000\024\012\074" +
    "\031\120\032\111\033\113\034\102\035\121\040\077\041" +
    "\114\045\116\001\002\000\030\012\uffc2\013\uffc2\030\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\045\uffc2\001\002\000\024\012\074\013\270\032\111" +
    "\033\113\034\102\035\121\040\077\041\114\045\127\001" +
    "\002\000\030\012\uffc0\013\uffc0\030\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0\001" +
    "\002\000\024\012\074\013\272\032\111\033\113\034\102" +
    "\035\121\040\077\041\114\045\127\001\002\000\030\012" +
    "\uffc1\013\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\045\uffc1\001\002\000\006\031" +
    "\066\045\061\001\002\000\004\015\uffdc\001\002\000\006" +
    "\015\uffda\017\uffda\001\002\000\026\012\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\040\uffef\041\uffef\044\uffef" +
    "\045\uffef\001\002\000\004\014\314\001\002\000\004\014" +
    "\301\001\002\000\004\015\302\001\002\000\004\012\303" +
    "\001\002\000\026\012\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\040\uffd9\041\uffd9\043\uffd9\045\uffd9\001\002" +
    "\000\026\012\000\031\000\032\000\033\000\034\000\035" +
    "\000\040\000\041\000\043\016\045\000\001\002\000\024" +
    "\012\074\031\120\032\111\033\113\034\102\035\121\040" +
    "\077\041\114\045\116\001\002\000\004\002\uffd8\001\002" +
    "\000\024\012\074\031\120\032\111\033\113\034\102\035" +
    "\121\040\077\041\114\045\116\001\002\000\024\012\074" +
    "\013\311\032\111\033\113\034\102\035\121\040\077\041" +
    "\114\045\127\001\002\000\004\002\uffd6\001\002\000\024" +
    "\012\074\013\313\032\111\033\113\034\102\035\121\040" +
    "\077\041\114\045\127\001\002\000\004\002\uffd7\001\002" +
    "\000\010\015\000\031\066\045\061\001\002\000\004\015" +
    "\316\001\002\000\004\012\317\001\002\000\026\012\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\040\uffe5\041" +
    "\uffe5\043\uffe5\045\uffe5\001\002\000\026\012\000\031\000" +
    "\032\000\033\000\034\000\035\000\040\000\041\000\043" +
    "\016\045\000\001\002\000\024\012\074\031\120\032\111" +
    "\033\113\034\102\035\121\040\077\041\114\045\116\001" +
    "\002\000\006\031\uffe4\044\uffe4\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\uffe7\001\002\000\004\045\326\001" +
    "\002\000\004\014\060\001\002\000\012\031\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\001\002\000\004\046\331\001\002\000" +
    "\004\016\332\001\002\000\014\027\ufff7\031\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\006\002\003\060\004\001\001\000\002\001" +
    "\001\000\006\003\005\061\006\001\001\000\002\001\001" +
    "\000\010\010\012\017\011\020\010\001\001\000\002\001" +
    "\001\000\010\010\012\017\326\020\010\001\001\000\010" +
    "\010\016\021\013\022\014\001\001\000\002\001\001\000" +
    "\016\004\030\006\037\011\031\012\032\024\033\025\036" +
    "\001\001\000\010\010\016\021\027\022\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\037\011\323\012\032\001\001\000\012" +
    "\006\037\011\322\012\032\025\255\001\001\000\002\001" +
    "\001\000\006\027\055\030\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\041\030\043\001\001\000" +
    "\002\001\001\000\006\005\050\010\052\001\001\000\006" +
    "\010\046\026\044\001\001\000\002\001\001\000\006\027" +
    "\047\030\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\050\010\052\001\001\000\012\010\064\014\062\015" +
    "\063\016\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\071\001\001\000\010\010\016\021\072\022\014\001" +
    "\001\000\046\013\121\024\077\025\036\032\100\033\103" +
    "\034\105\036\124\037\107\040\106\041\102\042\104\043" +
    "\122\044\075\045\074\051\116\052\114\054\111\057\123" +
    "\001\001\000\004\065\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\261\032\135\033\141\001\001" +
    "\000\042\025\255\032\100\033\103\034\105\036\256\037" +
    "\107\040\106\041\102\042\104\043\122\044\075\045\074" +
    "\051\116\052\114\054\111\057\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\041\030\043\001\001\000\002\001\001\000\006\027\055" +
    "\030\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\032\100\033\103" +
    "\034\105\037\125\040\106\041\102\042\104\043\122\044" +
    "\075\045\074\051\116\052\114\054\111\057\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\166\032\135\033\141\001\001\000\012\031\140" +
    "\032\135\033\141\053\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\164\032\135\033\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\145\032\135\033\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\160\032\135\033\141\001\001" +
    "\000\010\031\157\032\135\033\141\001\001\000\010\031" +
    "\156\032\135\033\141\001\001\000\010\031\155\032\135" +
    "\033\141\001\001\000\010\031\154\032\135\033\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\140\032\135\033\141\053\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\171" +
    "\032\135\033\141\001\001\000\004\067\172\001\001\000" +
    "\002\001\001\000\036\032\100\033\103\034\105\037\174" +
    "\040\106\041\102\042\104\043\122\044\075\045\074\051" +
    "\116\052\114\054\111\057\123\001\001\000\002\001\001" +
    "\000\010\031\176\032\135\033\141\001\001\000\002\001" +
    "\001\000\036\032\100\033\103\034\105\037\200\040\106" +
    "\041\102\042\104\043\122\044\075\045\074\051\116\052" +
    "\114\054\111\057\123\001\001\000\002\001\001\000\036" +
    "\032\100\033\103\034\105\037\202\040\106\041\102\042" +
    "\104\043\122\044\075\045\074\051\116\052\114\054\111" +
    "\057\123\001\001\000\002\001\001\000\014\010\206\031" +
    "\205\032\135\033\141\056\204\001\001\000\004\070\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\215" +
    "\055\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\224\032\135\033\141\001\001\000\010\031\222\032" +
    "\135\033\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\230\032\135\033\141\001\001\000\004\066\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\234\047\235\001\001\000\010\010\247\047\246\050\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\032\100" +
    "\033\103\034\105\037\125\040\106\041\102\042\104\043" +
    "\122\044\075\045\074\051\116\052\114\054\111\057\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\024\264\025\036\032\100" +
    "\033\103\034\105\035\265\036\266\037\107\040\106\041" +
    "\102\042\104\043\122\044\075\045\074\051\116\052\114" +
    "\054\111\057\123\001\001\000\042\025\255\032\100\033" +
    "\103\034\105\036\270\037\107\040\106\041\102\042\104" +
    "\043\122\044\075\045\074\051\116\052\114\054\111\057" +
    "\123\001\001\000\002\001\001\000\036\032\100\033\103" +
    "\034\105\037\125\040\106\041\102\042\104\043\122\044" +
    "\075\045\074\051\116\052\114\054\111\057\123\001\001" +
    "\000\002\001\001\000\036\032\100\033\103\034\105\037" +
    "\125\040\106\041\102\042\104\043\122\044\075\045\074" +
    "\051\116\052\114\054\111\057\123\001\001\000\002\001" +
    "\001\000\006\015\273\016\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\303\001\001\000\012\007\305\010\016\021\304\022" +
    "\014\001\001\000\044\024\306\025\036\032\100\033\103" +
    "\034\105\036\307\037\107\040\106\041\102\042\104\043" +
    "\122\044\075\045\074\051\116\052\114\054\111\057\123" +
    "\001\001\000\002\001\001\000\042\025\255\032\100\033" +
    "\103\034\105\036\311\037\107\040\106\041\102\042\104" +
    "\043\122\044\075\045\074\051\116\052\114\054\111\057" +
    "\123\001\001\000\036\032\100\033\103\034\105\037\125" +
    "\040\106\041\102\042\104\043\122\044\075\045\074\051" +
    "\116\052\114\054\111\057\123\001\001\000\002\001\001" +
    "\000\036\032\100\033\103\034\105\037\125\040\106\041" +
    "\102\042\104\043\122\044\075\045\074\051\116\052\114" +
    "\054\111\057\123\001\001\000\002\001\001\000\012\010" +
    "\064\014\314\015\063\016\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\317\001\001\000\010\010" +
    "\016\021\320\022\014\001\001\000\046\013\321\024\077" +
    "\025\036\032\100\033\103\034\105\036\124\037\107\040" +
    "\106\041\102\042\104\043\122\044\075\045\074\051\116" +
    "\052\114\054\111\057\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();

	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}

	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	List<QuadrupleIF> printQuadruplesList = new ArrayList<QuadrupleIF>();

	public SymbolIF checkIfExistsSymbolWithinOpenScopes (Token token, boolean iWantIt){
		if (iWantIt && !scopeManager.containsSymbol(token.getLexema())){
			semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " no declarado");
		} else if (!iWantIt && scopeManager.containsSymbol(token.getLexema())){
			semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " ya declarado");
		} else if (iWantIt && scopeManager.containsSymbol(token.getLexema())){
			return scopeManager.searchSymbol(token.getLexema());
		}
		return null;
	}

	public TypeIF checkIfExistsTypeWithinOpenScopes (Token token, boolean iWantIt){
		if (iWantIt && !scopeManager.containsType(token.getLexema())){
			semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " no declarado");
		} else if (!iWantIt && scopeManager.containsType(token.getLexema())){
			semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " ya declarado");
		} else if (iWantIt && scopeManager.containsType(token.getLexema())){
			return scopeManager.searchType(token.getLexema());
		}
		return null;
	}

	public void checkIfContainsReturn(ArrayList<Sentencia> list, String line){
		for (int i = 0; i < list.size(); i++){
			if (list.get(i).getType().contains("DEVUELVE")){
				return;
			}
		}
		semanticErrorManager.semanticFatalError("Linea " + line + " falta sentencia devuelve");
	}

	public void checkIfReturnTypesMatch(ArrayList<Sentencia> list, String type, String line){
		for (int i = 0; i < list.size(); i++){
			if (list.get(i).getType().contains("DEVUELVE")){
				if (!list.get(i).getType().contains(type)){
					semanticErrorManager.semanticFatalError("Linea " + line + " tipo de funcion " + type + " no coincide con tipo de retorno " + list.get(i).getType());
				}
			}
		}
	}

	public Expresion addIntermeidateCodeToArithmeticExpresion(Expresion result, Expresion operand1, Expresion operand2, String operation){
		TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
		IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
		TemporalIF temp = tf.create();
		cb.addQuadruples(operand1.getIntermediateCode());
		cb.addQuadruples(operand2.getIntermediateCode());
		cb.addQuadruple(operation, temp, operand1.getTemporal(), operand2.getTemporal());
		result.setTemporal(temp);
		result.setIntermediateCode(cb.create());
		return result;
	}

	public void tryToAssignAddressToOperands(SymbolIF symbol, List<QuadrupleIF> quadruples){
		for (QuadrupleIF quadruple: quadruples) {
			if (quadruple.getFirstOperand() instanceof Variable) {
				if (((Variable)quadruple.getFirstOperand()).getScope() == symbol.getScope() && ((Variable)quadruple.getFirstOperand()).getName().equals(symbol.getName()) || symbol.getScope().getName().equals("global") && ((Variable)quadruple.getFirstOperand()).getName().equals(symbol.getName())){
					((Variable)quadruple.getFirstOperand()).setAddress(((SymbolVariable)symbol).getAddress());
				}
			}
			if (quadruple.getSecondOperand() instanceof Variable) {
				if (((Variable)quadruple.getSecondOperand()).getScope() == symbol.getScope() && ((Variable)quadruple.getSecondOperand()).getName().equals(symbol.getName())
				|| symbol.getScope().getName().equals("global") && ((Variable)quadruple.getSecondOperand()).getName().equals(symbol.getName())){
					((Variable)quadruple.getSecondOperand()).setAddress(((SymbolVariable)symbol).getAddress());
				}
			}
			if (quadruple.getResult() instanceof Variable) {
				if (((Variable)quadruple.getResult()).getScope() == symbol.getScope() && ((Variable)quadruple.getResult()).getName().equals(symbol.getName())
				|| symbol.getScope().getName().equals("global") && ((Variable)quadruple.getResult()).getName().equals(symbol.getName())){
					((Variable)quadruple.getResult()).setAddress(((SymbolVariable)symbol).getAddress());
				}
			}
		}
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // grupoSintacticoEscribibleEntero ::= expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
		cb.addQuadruples(e.getIntermediateCode());
		cb.addQuadruple("WRITEINT", e.getTemporal());
		e.setIntermediateCode(cb.create());
		semanticErrorManager.semanticDebug("Codigo intermedio expresionEscribibleEnt " + e.getValue() + ": " + e.getIntermediateCode());
		RESULT = e;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoSintacticoEscribibleEntero",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // grupoSintacticoEscribibleEntero ::= epsilon 
            {
              Expresion RESULT =null;
		
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	Expresion e = new Expresion(scopeManager.searchType("entero"), "null", "null");
	cb.addQuadruple("WRITEEMPTY");
	e.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio expresionEscribibleEnt vacia: " + e.getIntermediateCode());
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoSintacticoEscribibleEntero",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // grupoSintacticoEscribible ::= STRING 
            {
              GrupoSintacticoEscribible RESULT =null;
		int myStringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int myStringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token myString = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		TemporalFactory tF = new TemporalFactory(scopeManager.getCurrentScope());
		IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
		LabelFactory lF = new LabelFactory();
		LabelIF label = lF.create();
		TemporalIF temp = tF.create();
		GrupoSintacticoEscribible myGrupoSintacticoEscribible = new GrupoSintacticoEscribible();
		cb.addQuadruple("WRITESTRING", temp, label); 
		printQuadruplesList.add(new Quadruple("CADENA", new Label(myString.getLexema()), label)); 
		myGrupoSintacticoEscribible.setIntermediateCode(cb.create());
		semanticErrorManager.semanticDebug("Codigo intermedio stringEscribibleString " + myString.getLexema() + ": " + myGrupoSintacticoEscribible.getIntermediateCode());
		RESULT = myGrupoSintacticoEscribible;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoSintacticoEscribible",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // grupoSintacticoEscribible ::= epsilon 
            {
              GrupoSintacticoEscribible RESULT =null;
		
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	GrupoSintacticoEscribible myGrupoSintacticoEscribible = new GrupoSintacticoEscribible();
	cb.addQuadruple("WRITEEMPTY");
	myGrupoSintacticoEscribible.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio stringEscribibleString vacia: " + myGrupoSintacticoEscribible.getIntermediateCode());
	RESULT = myGrupoSintacticoEscribible;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoSintacticoEscribible",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentenciaSalida ::= ESCRIBE_ENT OPEN_KEY grupoSintacticoEscribibleEntero NT$8 CLOSE_KEY SEMI_COLON 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$8 ::= 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		if (!e.getType().getName().equals("entero")){
			semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " la expresion no se puede evaluar a entero");
		}
		Sentencia sentencia = new Sentencia("SALIDA_ENTERO");
		sentencia.setIntermediateCode(e.getIntermediateCode());
		semanticErrorManager.semanticDebug("Codigo sentenciaSalida: " + sentencia.getIntermediateCode());
		RESULT = sentencia;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciaSalida ::= ESCRIBE OPEN_KEY grupoSintacticoEscribible CLOSE_KEY SEMI_COLON 
            {
              Sentencia RESULT =null;
		int contentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GrupoSintacticoEscribible content = (GrupoSintacticoEscribible)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	Sentencia sentencia = new Sentencia("SALIDA");
	sentencia.setIntermediateCode(content.getIntermediateCode());
	semanticErrorManager.semanticDebug("Codigo sentenciaSalida: " + sentencia.getIntermediateCode());
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciaMientras ::= MIENTRAS OPEN_KEY expresion NT$7 CLOSE_KEY sentencia 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentenciaAEjecutarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaAEjecutarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentenciaAEjecutar = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
    TemporalIF temp = tf.create();
	LabelFactoryIF lf = new LabelFactory();
	LabelIF inicioSentencia = lf.create();
	LabelIF finalSentencia = lf.create();
	IntermediateCodeBuilder cb= new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	Sentencia sentencia = new Sentencia("MIENTRAS");
	cb.addQuadruple("INL", inicioSentencia);
	cb.addQuadruples(e.getIntermediateCode());
	cb.addQuadruple("BZ", finalSentencia, e.getTemporal());
	cb.addQuadruples(sentenciaAEjecutar.getIntermediateCode());
	cb.addQuadruple("BR", inicioSentencia);
	cb.addQuadruple("INL", finalSentencia);
	sentencia.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio while " + e.getValue() + ": " + sentencia.getIntermediateCode());
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$7 ::= 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " la expresion no se puede evaluar a 0 u otro entero");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // porDefecto ::= epsilon 
            {
              CasoAlt RESULT =null;
		
		IntermediateCodeBuilder cb= new IntermediateCodeBuilder(scopeManager.getCurrentScope());
		CasoAlt casoAlt = new CasoAlt("PORDEFECTO");
		casoAlt.setIntermediateCode(cb.create());
		semanticErrorManager.semanticDebug("Codigo intermedio defaultVacio: " + casoAlt.getIntermediateCode());
		RESULT = casoAlt;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // porDefecto ::= PORDEFECTO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              CasoAlt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Funcion b = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	IntermediateCodeBuilder cb= new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	CasoAlt casoAlt = new CasoAlt("PORDEFECTO");
	cb.addQuadruples(b.getIntermediateCode());
	casoAlt.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio default: " + casoAlt.getIntermediateCode());
	RESULT = casoAlt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // casoAlt ::= CASO NUMERO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              CasoAlt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Funcion b = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	IntermediateCodeBuilder cb= new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	CasoAlt casoAlt = new CasoAlt(n.getLexema());
	ArrayList<Id> listaVariables = b.getListaVariables();
	for (int i = 0; i < listaVariables.size(); i++){
		cb.addQuadruples(listaVariables.get(i).getIntermediateCode());
	}
	ArrayList<Sentencia> listaSentencias = b.getListaSentencias();
	for (int i = 0; i < listaSentencias.size(); i++){
		cb.addQuadruples(listaSentencias.get(i).getIntermediateCode());
	}
	casoAlt.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio caseOfSwitch " + n.getLexema() + ": " + casoAlt.getIntermediateCode());
	RESULT = casoAlt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // casosAlternativa ::= casoAlt 
            {
              ArrayList<CasoAlt> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoAlt c = (CasoAlt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ArrayList<CasoAlt> list = new ArrayList<CasoAlt>();
		list.add(c);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // casosAlternativa ::= casosAlternativa casoAlt 
            {
              ArrayList<CasoAlt> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<CasoAlt> list = (ArrayList<CasoAlt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoAlt c = (CasoAlt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	list.add(c);
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaAlternativas ::= ALTENATIVAS OPEN_KEY expresion NT$6 CLOSE_KEY OPEN_PARENTHESIS casosAlternativa porDefecto CLOSE_PARENTHESIS 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<CasoAlt> list = (ArrayList<CasoAlt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int casoPorDefectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casoPorDefectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CasoAlt casoPorDefecto = (CasoAlt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
	IntermediateCodeBuilder cb= new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	LabelFactory lf = new LabelFactory();
	TemporalIF valueOfExpresion = tf.create();
	LabelIF labelAtEnDofSwitch = lf.create();
	Sentencia sentencia = new Sentencia("ALTERNATIVAS");
	cb.addQuadruples(e.getIntermediateCode());
	for (int i = 0; i < list.size(); i++) {
		Value valueOfGuard = new Value(Integer.parseInt(list.get(i).getValueOfGuard()));
		LabelIF labelAtEndOfCase = lf.create();
		cb.addQuadruple("SUB", valueOfExpresion, e.getTemporal(), valueOfGuard);
		cb.addQuadruple("BNZ", labelAtEndOfCase, valueOfExpresion); //si no son iguales saltar al final
		cb.addQuadruples(list.get(i).getIntermediateCode()); // añadir código sentencias bloque
		cb.addQuadruple("BR", labelAtEnDofSwitch); //mutually exclusive cases, so jump out
		cb.addQuadruple("INL", labelAtEndOfCase); // final del caso
	}
	cb.addQuadruples(casoPorDefecto.getIntermediateCode());
	cb.addQuadruple("INL", labelAtEnDofSwitch); // insertar etiquetaElse
	sentencia.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio switch " + e.getValue() + ": " + sentencia.getIntermediateCode());
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " la expresion no se puede evaluar a un entero");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentenciaDentroDelIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaDentroDelIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentenciaDentroDelIf = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (!e.getType().getName().equals("entero")){
			semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " expresion no se puede evaluar a 0 u otro entero");
		}
		LabelFactory lF = new LabelFactory();
		LabelIF etiquetaFinIf = lF.create();
		IntermediateCodeBuilder cb= new IntermediateCodeBuilder(scopeManager.getCurrentScope());
		Sentencia sentencia = new Sentencia("SI_SINO");
		cb.addQuadruples(e.getIntermediateCode()); //añadir el código de la expresión
		cb.addQuadruple("BZ", etiquetaFinIf, e.getTemporal()); //si no se cumple la condicion salto etiquetaFinIf 
		cb.addQuadruples (sentenciaDentroDelIf.getIntermediateCode()); // añadir código sentencias parte IF
		cb.addQuadruple("INL", etiquetaFinIf); // insertar etiquetaFinIf
		sentencia.setIntermediateCode(cb.create());
		semanticErrorManager.semanticDebug("Codigo intermedio if " + e.getValue() + ": " + sentencia.getIntermediateCode());
		RESULT=sentencia;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia SINO sentencia 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sentencia s1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s2 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " expresion no se puede evaluar a 0 u otro entero");
	}
	LabelFactory lF = new LabelFactory();
	LabelIF etiquetaFinIf = lF.create(); //Etiqueta para fin de las sentenicas IF
	LabelIF etiquetaElse = lF.create(); //Etiqueta de comienzo parte Else
	IntermediateCodeBuilder cb= new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	Sentencia sentencia = new Sentencia("SI");
	cb.addQuadruples(e.getIntermediateCode()); //añadir el código de la expresión
	cb.addQuadruple("BZ", etiquetaElse, e.getTemporal()); //si no se cumple la condicion salto etiquetaElse 
	cb.addQuadruples (s1.getIntermediateCode()); // añadir código sentencias parte IF
	cb.addQuadruple("BR", etiquetaFinIf); //salto a la etiquetaFinIf
	cb.addQuadruple("INL", etiquetaElse); // insertar etiquetaElse
	cb.addQuadruples(s2.getIntermediateCode()); //añadir código sentencias parte Else
	cb.addQuadruple("INL", etiquetaFinIf); // insertar etiquetaFinIf
	sentencia.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio ifElse " + e.getValue() + ": " + sentencia.getIntermediateCode());
	RESULT=sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ref ::= accesoVector 
            {
              Referencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccesoVector a = (AccesoVector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Referencia r = new Referencia(a.getName() , "ACCESO_VECTOR", a.getValue());
		r.setIntermediateCode(a.getIntermediateCode());
		r.setTemporal(a.getTemporal());
		RESULT = r;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ref ::= IDENTIFICADOR 
            {
              Referencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	if (!mySymbol.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " el objeto " + id.getLexema() + " no es de tipo entero");
	}
	Referencia r = new Referencia(mySymbol.getName(), "IDENTIFICADOR", 0);
	RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaAsignacionSuma ::= ref ASSIGN_SUMA expresion SEMI_COLON 
            {
              Sentencia RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Referencia reference = (Referencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + a.getLine() + " no se puede sumar un " + e.getType().getName() + " a una variable");
	}
	TemporalFactoryIF tf = new TemporalFactory(scopeManager.getCurrentScope());
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	TemporalIF temp = tf.create();
	TemporalIF tempValueOfVar = tf.create();
	TemporalIF tempSuma = tf.create();
	Sentencia sentencia = new Sentencia("ASIGNACION_SUMA");
	cb.addQuadruples(e.getIntermediateCode());
	if (reference.getType().equals("ACCESO_VECTOR")){;
		cb.addQuadruples(reference.getIntermediateCode());
		cb.addQuadruple("MVP", tempValueOfVar, reference.getTemporal()); //value of var = value of index of var
		cb.addQuadruple("ADD", tempSuma, e.getTemporal(), tempValueOfVar); // tempSuma = value of expresion + value of var
		cb.addQuadruple("STP", temp, tempSuma); // index of var = tempSuma
	} else{
		Variable var = new Variable(reference.getName(), scopeManager.searchSymbol(reference.getName()).getScope());;
		cb.addQuadruple("MVA", temp, var); // temp = index of var
		cb.addQuadruple("MVP", tempValueOfVar, temp); //value of var = value of index of var
		cb.addQuadruple("ADD", tempSuma, e.getTemporal(), tempValueOfVar); // tempSuma = value of expresion + value of var
		cb.addQuadruple("STP", temp, tempSuma); // index of var = tempSuma
	}
	sentencia.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio asignacion " + reference.getName() + "[" + reference.getIndex() + "]" + " = " + e.getValue() +": " + sentencia.getIntermediateCode());
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionSuma",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaAsignacion ::= ref ASSIGN expresion SEMI_COLON 
            {
              Sentencia RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Referencia reference = (Referencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + a.getLine() + " no se puede asignar un " + e.getType().getName() + " a una variable");
	}
	TemporalFactoryIF tf = new TemporalFactory(scopeManager.getCurrentScope());
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	TemporalIF temp = tf.create();
	Sentencia sentencia = new Sentencia("ASIGNACION");
	cb.addQuadruples(e.getIntermediateCode());
	if (reference.getType().equals("ACCESO_VECTOR")){;
		cb.addQuadruples(reference.getIntermediateCode());
		cb.addQuadruple("STP", reference.getTemporal(), e.getTemporal());
	} else{
		Variable var = new Variable(reference.getName(), scopeManager.searchSymbol(reference.getName()).getScope());;
		cb.addQuadruple("MVA", temp, var);
		cb.addQuadruple("STP", temp, e.getTemporal());
	}
	sentencia.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio asignacion " + reference.getName() + "[" + reference.getIndex() + "]" + " = " + e.getValue() +": " + sentencia.getIntermediateCode());
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaIncremento ::= IDENTIFICADOR AUTO_INCREMENTO SEMI_COLON 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	if (!mySymbol.getType().getName().equals("entero")) {
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " +id.getColumn() + " no se puede aplicar autoincremento a objeto no de tipo entero");
	}
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	Sentencia sentencia = new Sentencia ("AUTOINCREMENTO");
	cb.addQuadruple("INC", id.getLexema());
	sentencia.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio sentenciaAutoincremento " + id.getLexema() + ": " + sentencia.getIntermediateCode());
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIncremento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaDevuelve ::= DEVUELVE expresion SEMI_COLON 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
		Sentencia sentencia = new Sentencia ("DEVUELVE_" + e.getType().getName());
		RESULT = sentencia;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaDevuelve ::= DEVUELVE SEMI_COLON 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("DEVUELVE_VACIO");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= bloque 
            {
              Sentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion b = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
										ArrayList<Id> listaVariables = b.getListaVariables();
										for (int i = 0; i < listaVariables.size(); i++){
											cb.addQuadruples(listaVariables.get(i).getIntermediateCode());
										}
										ArrayList<Sentencia> listaSentencias = b.getListaSentencias();
										for (int i = 0; i < listaSentencias.size(); i++){
											cb.addQuadruples(listaSentencias.get(i).getIntermediateCode());
										}
										Sentencia sentencia = new Sentencia ("BLOQUE");
										sentencia.setIntermediateCode(cb.create());
										semanticErrorManager.semanticDebug("Codigo intermedio bloque: "  + sentencia.getIntermediateCode());
										RESULT = sentencia;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= sentenciaSalida 
            {
              Sentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RESULT = sentencia;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Sentencia RESULT =null;
		
								Sentencia sentencia = new Sentencia ("LLAMADAFUNCION");
								RESULT = sentencia;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= sentenciaMientras 
            {
              Sentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							RESULT = sentencia;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= sentenciaAlternativas 
            {
              Sentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = sentencia;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= sentenciaSi 
            {
              Sentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = sentencia;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= sentenciaAsignacionSuma 
            {
              Sentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = sentencia;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= sentenciaAsignacion 
            {
              Sentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = sentencia;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= sentenciaIncremento 
            {
              Sentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = sentencia;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentenciaDevuelve 
            {
              Sentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listadoSentencias ::= sentencia 
            {
              ArrayList<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ArrayList<Sentencia> list= new ArrayList<Sentencia>();
		list.add(s);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listadoSentencias ::= listadoSentencias sentencia 
            {
              ArrayList<Sentencia> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	list.add(s);
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque1 ::= listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		scopeManager.closeScope();
		Funcion funcion = new Funcion (list, new ArrayList<Id>());
		RESULT = funcion;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque1 ::= seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;
		int listaVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Id> listaVariables = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> listaSentencias = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	scopeManager.closeScope();
	Funcion funcion = new Funcion (listaSentencias, listaVariables);
	RESULT = funcion;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque ::= OPEN_PARENTHESIS NT$5 bloque1 
            {
              Funcion RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Funcion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$5 ::= 
            {
              Funcion RESULT =null;

	scopeManager.openScope("void");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros ::= expresion COLON parametros 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> list = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		list.add(e);
		RESULT = list;	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros ::= expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Expresion> list = new ArrayList<Expresion>();
	list.add(e);
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY CLOSE_KEY 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
		if (!(mySymbol instanceof SymbolFunction) && (!(mySymbol instanceof SymbolProcedure))){
			semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " identificador " + mySymbol.getName() + " no es una funcion");
		}
		ArrayList<Parametro> listaOriginal = new ArrayList();
		if (mySymbol instanceof SymbolFunction){
			listaOriginal = ((SymbolFunction)mySymbol).getParameters();
		} else {
			listaOriginal = ((SymbolProcedure)mySymbol).getParameters();
		}
		if (listaOriginal.size() != 0){
			semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " funcion " + mySymbol.getName() + " parametros esperados " + listaOriginal.size() + " parametros obtenidos " + "0" );
		}
		RESULT = id.getLexema();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY parametros CLOSE_KEY 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> list = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	if (!(mySymbol instanceof SymbolFunction) && (!(mySymbol instanceof SymbolProcedure))){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " identificador " + mySymbol.getName() + " no es una funcion");
	}
	ArrayList<Parametro> listaOriginal = new ArrayList();
	if (mySymbol instanceof SymbolFunction){
		listaOriginal = ((SymbolFunction)mySymbol).getParameters();
	} else {
		listaOriginal = ((SymbolProcedure)mySymbol).getParameters();
	}
	if (listaOriginal.size() != list.size()){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " funcion " + mySymbol.getName() + " parametros esperados " + listaOriginal.size() + " parametros obtenidos " + list.size());
	}
	for (int i = 0; i < list.size(); i++){
		if (!list.get(i).getType().getName().equals(listaOriginal.get(i).getType().getName())){
			semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " funcion " + mySymbol.getName() + " parametro " + (list.size() - i) + " tipo esperado " + listaOriginal.get(i).getType().getName() + " tipo obtenido " + list.get(i).getType().getName());
		}
	}
	RESULT = id.getLexema();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciaLlamadaFuncion ::= llamadaFuncion SEMI_COLON 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaLlamadaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // accesoVector ::= IDENTIFICADOR OPEN_BRACKET expresion CLOSE_BRACKET 
            {
              AccesoVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	if (!(mySymbol.getType() instanceof TypeArray)){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " identificador " + mySymbol.getName() + " no es un vector");
	}
	if (!a.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " expresion indice debe ser de tipo int");
	}
	if (a.getSubType().equals("constante")){
		int maxLength = ((TypeArray)mySymbol.getType()).getLength();
		int index = (int)a.getValue();
		if (index < 0 || index >= maxLength){
			semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " expresion con valor " + index +" fuera de rango [0-" + (maxLength - 1) + "]");
		}
	}
	TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	TemporalIF temp = tf.create();
	TemporalIF temporalForMemoryID = tf.create();
	TemporalIF temporalForMemoryIDWithDesplazamiento = tf.create();
	AccesoVector accesoVector = new AccesoVector (id.getLexema(), (int)a.getValue());
	Variable var = new Variable(id.getLexema(), scopeManager.searchSymbol(id.getLexema()).getScope());
	cb.addQuadruples(a.getIntermediateCode());
	cb.addQuadruple("MVA", temporalForMemoryID, var); // move value of pointer
	cb.addQuadruple("ADD", temporalForMemoryIDWithDesplazamiento, temporalForMemoryID, a.getTemporal()); // set value of actual pointer
	accesoVector.setTemporal(temporalForMemoryIDWithDesplazamiento);
	accesoVector.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio accesoVector " + id.getLexema() + "[" + a.getTemporal() + "]: " + accesoVector.getIntermediateCode());
	RESULT = accesoVector;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= llamadaFuncion 
            {
              Expresion RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												SymbolIF mySymbol = scopeManager.searchSymbol(name);
												Expresion e = new Expresion(mySymbol.getType(), "variable", null);
												RESULT = e;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccesoVector a = (AccesoVector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
											IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
											TemporalIF temp = tf.create();
											Expresion e = new Expresion(scopeManager.searchType("entero"), "variable", a.getValue());
											cb.addQuadruples(a.getIntermediateCode());
											cb.addQuadruple("MVP", temp, a.getTemporal()); // move to temp value pointed by index
											e.setTemporal(temp);
											e.setIntermediateCode(cb.create());
											RESULT = e;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion AND_LOGICA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
											semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
										}
										String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
										Object value;
										if (subTipo.equals("constante")){
											value = Integer.parseInt(a.getValue().toString()) < Integer.parseInt(b.getValue().toString()) ? 1 : 0;
										} else {
											value = null;
										}
										LabelFactory lf = new LabelFactory();
										LabelIF lb1 = lf.create();
										LabelIF lb2 = lf.create();
										LabelIF startOfSecondOperand = lf.create();
										LabelIF startOfAndOperation = lf.create();
										TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
										IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
										TemporalIF resultOfSubstraction = tf.create();
										TemporalIF temp = tf.create();
										TemporalIF valueOfFirstOperand = tf.create();
										TemporalIF valueOfSecondOperand = tf.create();
										Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
										cb.addQuadruples(a.getIntermediateCode());
										cb.addQuadruples(b.getIntermediateCode());
										cb.addQuadruple("BZ", lb1, a.getTemporal()); // jump if zero
										cb.addQuadruple("MV", valueOfFirstOperand, new Value(1)); //move true, only if not zero
										cb.addQuadruple("BR", startOfSecondOperand); // jump to next operand, only if false
										cb.addQuadruple("INL", lb1);
										cb.addQuadruple("MV", valueOfFirstOperand, new Value(0)); //move true, only if zero
										cb.addQuadruple("INL", startOfSecondOperand);
										cb.addQuadruple("BZ", lb2, b.getTemporal()); // jump if zero
										cb.addQuadruple("MV", valueOfSecondOperand, new Value(1)); //move true, only if not zero
										cb.addQuadruple("BR", startOfAndOperation); // jump to next operand, only if false
										cb.addQuadruple("INL", lb2);
										cb.addQuadruple("MV", valueOfSecondOperand, new Value(0)); //move true, only if zero
										cb.addQuadruple("INL", startOfAndOperation);
										cb.addQuadruple("AND", temp, valueOfFirstOperand, valueOfSecondOperand);
										e.setTemporal(temp);
										e.setIntermediateCode(cb.create());
										semanticErrorManager.semanticDebug("Codigo intermedio and " + a.getValue() + " AND " + b.getValue() + ": " + e.getIntermediateCode());
										RESULT = e;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion EQUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
										semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
									}
									String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
									Object value;
									if (subTipo.equals("constante")){
										value = Integer.parseInt(a.getValue().toString()) == Integer.parseInt(b.getValue().toString()) ? 1 : 0;
									} else {
										value = null;
									}
									LabelFactory lf = new LabelFactory();
									LabelIF lb1 = lf.create();
									LabelIF lb2 = lf.create();
									TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
									IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
									TemporalIF resultOfSubstraction = tf.create();
									TemporalIF temp = tf.create();
									Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
									cb.addQuadruples(a.getIntermediateCode());
									cb.addQuadruples(b.getIntermediateCode());
									cb.addQuadruple("SUB", resultOfSubstraction, b.getTemporal(), a.getTemporal()); // zero if true
									cb.addQuadruple("BZ", lb1, resultOfSubstraction); // jump if true
									cb.addQuadruple("MV", temp, new Value(0)); //move false, only if false
									cb.addQuadruple("BR", lb2); // jump to end, only if false
									cb.addQuadruple("INL", lb1); 
									cb.addQuadruple("MV", temp, new Value(1)); //move true, only if true
									cb.addQuadruple("INL", lb2);
									e.setTemporal(temp);
									e.setIntermediateCode(cb.create());
									semanticErrorManager.semanticDebug("Codigo intermedio igualQue " + a.getValue() + " == " + b.getValue() + ": " + e.getIntermediateCode());
									RESULT = e;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion LOWER_THAN expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
									semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
								}
								String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
								Object value;
								if (subTipo.equals("constante")){
									value = Integer.parseInt(a.getValue().toString()) < Integer.parseInt(b.getValue().toString()) ? 1 : 0;
								} else {
									value = null;
								}
								LabelFactory lf = new LabelFactory();
								LabelIF lb1 = lf.create();
								LabelIF lb2 = lf.create();
								TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
								IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
								TemporalIF resultOfSubstraction = tf.create();
								TemporalIF temp = tf.create();
								Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
								cb.addQuadruples(a.getIntermediateCode());
								cb.addQuadruples(b.getIntermediateCode());
								cb.addQuadruple("SUB", resultOfSubstraction, b.getTemporal(), a.getTemporal()); // positive if true
								cb.addQuadruple("BN", lb1, resultOfSubstraction); // jump if positive
								cb.addQuadruple("BZ", lb1, resultOfSubstraction); // jump if zero
								cb.addQuadruple("MV", temp, new Value(1)); //move false, only if false
								cb.addQuadruple("BR", lb2); // jump to end, only if false
								cb.addQuadruple("INL", lb1); 
								cb.addQuadruple("MV", temp, new Value(0)); //move true, only if true
								cb.addQuadruple("INL", lb2);
								e.setTemporal(temp);
								e.setIntermediateCode(cb.create());
								semanticErrorManager.semanticDebug("Codigo intermedio menorQue " + a.getValue() + " < " + b.getValue() + ": " + e.getIntermediateCode());
								RESULT = e;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= NEGACION expresion 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if (!a.getType().getName().equals("entero")){
								semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresion debe ser de tipo int");
							}
							String subTipo = a.getSubType().equals("constante") ? "constante" : "variable";
							Object value;
							if (subTipo.equals("constante")){
								value = Integer.parseInt(a.getValue().toString()) == 0 ? 1 : 0;
							} else {
								value = null;
							}
							LabelFactory lf = new LabelFactory();
							LabelIF lb1 = lf.create();
							LabelIF lb2 = lf.create();
							TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
							IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
							TemporalIF temp = tf.create();
							Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
							cb.addQuadruples(a.getIntermediateCode());
							cb.addQuadruple("BZ", lb1, a.getTemporal()); // jump if zero
							cb.addQuadruple("MV", temp, new Value(0)); //move false, only if 1
							cb.addQuadruple("BR", lb2); // jump to end, only if false
							cb.addQuadruple("INL", lb1); 
							cb.addQuadruple("MV", temp, new Value(1)); //move true, only if 0
							cb.addQuadruple("INL", lb2);
							e.setTemporal(temp);
							e.setIntermediateCode(cb.create());
							semanticErrorManager.semanticDebug("Codigo intermedio negacion " + a.getValue() + ": " + e.getIntermediateCode());
							RESULT = e;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion AUTO_INCREMENTO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if (!a.getType().getName().equals("entero")){
							semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresion debe ser de tipo int");
						}
						String subTipo = a.getSubType().equals("constante") ? "constante" : "variable";
						Object value = subTipo.equals("constante") ? Integer.parseInt(a.getValue().toString()) + 1 : null;
						TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
						IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
						TemporalIF temp = tf.create();
						Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
						cb.addQuadruples(a.getIntermediateCode());
						cb.addQuadruple("INC", a.getTemporal());
						cb.addQuadruple("MV", temp, a.getTemporal());
						e.setTemporal(temp);
						e.setIntermediateCode(cb.create());
						semanticErrorManager.semanticDebug("Codigo intermedio autoincremento " + a.getValue() + "++: " + e.getIntermediateCode());
						RESULT = e;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion MULT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
						semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
					}
					String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
					Object value = subTipo.equals("constante") ? Integer.parseInt(a.getValue().toString()) * Integer.parseInt(b.getValue().toString()) : null;
					Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
					addIntermeidateCodeToArithmeticExpresion(e, a, b, "MUL");
					semanticErrorManager.semanticDebug("Codigo intermedio multiplicacion " + a.getValue() + " * " + b.getValue() + ": " + e.getIntermediateCode());
					RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion PLUS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
					semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
				}
				String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
				Object value = subTipo.equals("constante") ? Integer.parseInt(a.getValue().toString()) + Integer.parseInt(b.getValue().toString()) : null;
				Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
				addIntermeidateCodeToArithmeticExpresion(e, a, b, "ADD");
				semanticErrorManager.semanticDebug("Codigo intermedio suma " + a.getValue() + " + " + b.getValue() + ": " + e.getIntermediateCode());
				RESULT = e;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= OPEN_KEY expresion CLOSE_KEY 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = e;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
		String subTipo = mySymbol instanceof SymbolConstant ? "constante" : "variable";
		Object value = subTipo.equals("constante") ? ((SymbolConstant)mySymbol).getValue() : null;

		TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
		IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
		TemporalIF temp = tf.create();
		if (mySymbol instanceof SymbolConstant){
			cb.addQuadruple("MV", temp, new Value(value));
		} else{
			cb.addQuadruple("MV", temp, new Variable(id.getLexema(), mySymbol.getScope()));
		}
		Expresion e = new Expresion(mySymbol.getType(), subTipo, value);
		e.setTemporal(temp);
		e.setIntermediateCode(cb.create());
	semanticErrorManager.semanticDebug("Codigo intermedio expresion identificador " + id.getLexema() + ": " + e.getIntermediateCode());
		RESULT = e;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= NUMERO 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	TemporalFactory tf = new TemporalFactory(scopeManager.getCurrentScope());
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	TemporalIF temp = tf.create();
	cb.addQuadruple("MV", temp, new Value(Integer.parseInt(n.getLexema())));
	Expresion e = new Expresion(scopeManager.searchType("entero"), "constante", Integer.parseInt(n.getLexema()));
	e.setIntermediateCode(cb.create());
	e.setTemporal(temp);
	semanticErrorManager.semanticDebug("Codigo intermedio expresion numero " + n.getLexema() + ": " + e.getIntermediateCode());
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcionPrincipal1 ::= seccionTipos listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		scopeManager.closeScope();
		Funcion funcion = new Funcion (list, new ArrayList<Id>());
		RESULT = funcion;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcionPrincipal1 ::= seccionTipos seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;
		int listaVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Id> listaVariables = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> listaSentencias = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	scopeManager.closeScope();
	Funcion funcion = new Funcion (listaSentencias, listaVariables);
	RESULT = funcion;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS NT$4 funcionPrincipal1 
            {
              Funcion RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Funcion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		checkIfContainsReturn(funcion.getListaSentencias(), Integer.toString(p.getLine()));
		checkIfReturnTypesMatch(funcion.getListaSentencias(), "VACIO", Integer.toString(p.getLine()));
		SymbolProcedure newSymbol = new SymbolProcedure(scopeManager.getCurrentScope(), p.getLexema(), scopeManager.searchType("vacio"), new ArrayList<Parametro>());
		scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);
		RESULT = funcion;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {
              Funcion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

	scopeManager.openScope("main");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametro ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		TypeIF type = checkIfExistsTypeWithinOpenScopes(identifier, true);
		Parametro param = new Parametro(type, name.getLexema());
		RESULT = param;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametro ::= ENTERO IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Parametro param = new Parametro(scopeManager.searchType("entero"), name.getLexema());
	RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionParametros ::= parametro COLON declaracionParametros 
            {
              ArrayList<Parametro> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		params.add(param);
		RESULT = params;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionParametros ::= parametro 
            {
              ArrayList<Parametro> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Parametro> params = new ArrayList();
	params.add(param);
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // seccionParametros ::= epsilon 
            {
              ArrayList<Parametro> RESULT =null;
		
		ArrayList<Parametro> params = new ArrayList();
		RESULT = params;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seccionParametros ::= declaracionParametros 
            {
              ArrayList<Parametro> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion1 ::= seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;
		int listOfVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listOfVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Id> listOfVariables = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listOfSentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listOfSentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> listOfSentencias = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		checkIfContainsReturn(listOfSentencias, Integer.toString(p.getLine()));
		scopeManager.closeScope();
		Funcion funcion1 = new Funcion(listOfSentencias, listOfVariables);
		RESULT = funcion1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion1 ::= listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	checkIfContainsReturn(list, Integer.toString(p.getLine()));
	scopeManager.closeScope();
	Funcion funcion1 = new Funcion(list, new ArrayList<Id>());
	RESULT = funcion1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion ::= ENTERO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS NT$3 seccionTipos funcion1 
            {
              Funcion RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Funcion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				checkIfReturnTypesMatch(funcion.getListaSentencias(), "entero", Integer.toString(identifier.getLine()));
				RESULT = funcion;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Funcion RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

			checkIfExistsSymbolWithinOpenScopes(identifier, false);
			SymbolFunction newSymbol = new SymbolFunction(scopeManager.getCurrentScope(), identifier.getLexema(), scopeManager.searchType("entero"), params);
			scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);
			scopeManager.openScope();
			for (int i = 0; i < params.size(); i++){
				TypeIF type = params.get(i).getType();
				SymbolParameter<?> newSymbolParameter = new SymbolParameter<>(scopeManager.getCurrentScope(), params.get(i).getName(), params.get(i).getType(), null);
				scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbolParameter);
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion ::= VACIO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS NT$2 seccionTipos funcion1 
            {
              Funcion RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Funcion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		checkIfReturnTypesMatch(funcion.getListaSentencias(), "VACIO", Integer.toString(identifier.getLine()));
		RESULT = funcion;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Funcion RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

	checkIfExistsSymbolWithinOpenScopes(identifier,  false);
	SymbolProcedure newSymbol = new SymbolProcedure(scopeManager.getCurrentScope(), identifier.getLexema(), scopeManager.searchType("vacio"), params);
	scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);
	scopeManager.openScope();
	for (int i = 0; i < params.size(); i++){
		TypeIF type = params.get(i).getType();
		SymbolParameter<?> newSymbolParameter = new SymbolParameter<>(scopeManager.getCurrentScope(), params.get(i).getName(), params.get(i).getType(), null);
		scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbolParameter);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // seccionFunciones ::= funcionPrincipal 
            {
              ArrayList<Funcion> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ArrayList<Funcion> list = new ArrayList<Funcion>();
		list.add(f);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionFunciones ::= funcion seccionFunciones 
            {
              ArrayList<Funcion> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Funcion> list = (ArrayList<Funcion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	list.add(f);
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id1 ::= ASSIGN NUMERO 
            {
              Id1 RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Id1 declaration = new Id1(true, Integer.parseInt(n.getLexema()));
		RESULT = declaration;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id1 ::= epsilon 
            {
              Id1 RESULT =null;
		
	Id1 declaration = new Id1(false, 0);
	RESULT = declaration;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id ::= IDENTIFICADOR id1 
            {
              Id RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id1 declaration = (Id1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	checkIfExistsSymbolWithinOpenScopes(identifier, false);
	Id fullDeclaration = new Id (identifier.getLexema(), declaration.hasAssignmentValue(), declaration.getValue());
	if (declaration.hasAssignmentValue()){
		IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
		TemporalFactoryIF tf = new TemporalFactory(scopeManager.getCurrentScope());
		cb.addQuadruple("MV", new Variable (identifier.getLexema(), scopeManager.getCurrentScope()), new Value(declaration.getValue()));
		fullDeclaration.setIntermediateCode(cb.create());
		semanticErrorManager.semanticDebug("Codigo intermedio declaracionVariableInizializada " + identifier.getLexema() + " = " + declaration.getValue() + ": " + fullDeclaration.getIntermediateCode());
	}
	RESULT = fullDeclaration;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listadoIDs1 ::= epsilon 
            {
              ArrayList<Id> RESULT =null;
		
		ArrayList<Id> emptyList = new ArrayList();
		RESULT = emptyList;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listadoIDs1 ::= COLON listadoIDs 
            {
              ArrayList<Id> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIDs ::= id listadoIDs1 
            {
              ArrayList<Id> RESULT =null;
		int fullDeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fullDeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Id fullDeclaration = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int restOfDeclarationsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restOfDeclarationsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Id> restOfDeclarations = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	restOfDeclarations.add(fullDeclaration);
	RESULT = restOfDeclarations;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVariable ::= IDENTIFICADOR listadoIDs SEMI_COLON 
            {
              ArrayList<Id> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		TypeIF type = checkIfExistsTypeWithinOpenScopes(identifier, true);
		for (int i = 0; i < list.size(); i++){
			if (list.get(i).hasAssignmentValue()){ // if is being tried to be assigned
				semanticErrorManager.semanticFatalError("Linea " + identifier.getLine() + " " + list.get(i).getName() + " no puede ser inicializado");
			}
			SymbolVariable newSymbol = new SymbolVariable(scopeManager.getCurrentScope(), list.get(i).getName(), type);
			scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);
		}
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= ENTERO listadoIDs SEMI_COLON 
            {
              ArrayList<Id> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	for (int i = 0; i < list.size(); i++){
		SymbolVariable newSymbol =	new SymbolVariable(scopeManager.getCurrentScope(), list.get(i).getName(), scopeManager.searchType("entero"));
		scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);
	}
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seccionVariables ::= declaracionVariable 
            {
              ArrayList<Id> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              ArrayList<Id> RESULT =null;
		int listOfListsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listOfListsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Id> listOfLists = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	for (int i = 0; i < list.size(); i++){
		listOfLists.add(list.get(i));
	}
	RESULT = listOfLists;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tamTipo ::= IDENTIFICADOR 
            {
              TamTipo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		SymbolIF symbol = checkIfExistsSymbolWithinOpenScopes(s, true);
		if (!(symbol instanceof SymbolConstant)){ // if it is not a constant)
			semanticErrorManager.semanticFatalError("Linea " + s.getLine() + " Columna " + s.getColumn() + " identificador " + s.getLexema() + " no hace referencia a una constante");
		}
		int value = ((SymbolConstant)symbol).getValue();
		if (value <= 0){ // if it is a constant (and thus an integer) but 0
			semanticErrorManager.semanticFatalError("Linea " + s.getLine() + " Columna " + s.getColumn() + " valor " + s.getLexema() + " debe ser positivo");
		}
		TamTipo tamTipo = new TamTipo(value);
		RESULT = tamTipo;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tamTipo ::= NUMERO 
            {
              TamTipo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (Integer.parseInt(n.getLexema()) <= 0){ // if it is not positive
		semanticErrorManager.semanticFatalError("Linea " + n.getLine() + " Columna " + n.getColumn() + " valor " + n.getLexema() + " fuera del rango");
	}
	TamTipo tamTipo = new TamTipo(Integer.parseInt(n.getLexema()));
	RESULT = tamTipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionTipo ::= TIPO ENTERO IDENTIFICADOR OPEN_BRACKET tamTipo CLOSE_BRACKET SEMI_COLON 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TamTipo tamTipo = (TamTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	checkIfExistsTypeWithinOpenScopes(identifier, false);
	TypeArray typeArray = new TypeArray(scopeManager.getCurrentScope(), identifier.getLexema(), (int)tamTipo.getValue());
	scopeManager.getCurrentScope().getTypeTable().addType(typeArray);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionTipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionTipos ::= declaracionTipo seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= CONSTANTE IDENTIFICADOR NUMERO SEMI_COLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	checkIfExistsSymbolWithinOpenScopes(name, false);
	SymbolConstant newSymbol = new SymbolConstant(scopeManager.getCurrentScope(), name.getLexema(), scopeManager.searchType("entero"), Integer.parseInt(value.getLexema()));
	scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccionConstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccionConstantes ::= declaracionConstante seccionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // axiom1 ::= seccionFunciones 
            {
              Axiom1 RESULT =null;
		int listaFuncionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaFuncionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Funcion> listaFunciones = (ArrayList<Funcion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
		for (int i = 0; i < listaFunciones.size(); i++){
			ArrayList<Id> listaVariables = listaFunciones.get(i).getListaVariables();
			for (int j = 0; j < listaVariables.size(); j++){
				cb.addQuadruples(listaVariables.get(j).getIntermediateCode());
			}
			ArrayList<Sentencia> listaSentencias = listaFunciones.get(i).getListaSentencias();
			for (int j = 0; j < listaSentencias.size(); j++){
				cb.addQuadruples(listaSentencias.get(j).getIntermediateCode());
			}
		}
		Axiom1 axiom = new Axiom1();
		axiom.setIntermediateCode(cb.create());
		RESULT = axiom;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom1 ::= seccionVariables seccionFunciones 
            {
              Axiom1 RESULT =null;
		int listaVariablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaVariablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Id> listaVariables = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaFuncionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaFuncionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Funcion> listaFunciones = (ArrayList<Funcion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	for (int i = 0; i < listaVariables.size(); i++){
		cb.addQuadruples(listaVariables.get(i).getIntermediateCode());
	}
	for (int i = 0; i < listaFunciones.size(); i++){
		ArrayList<Id> listaVariablesDeFuncion = listaFunciones.get(i).getListaVariables();
		for (int j = 0; j < listaVariablesDeFuncion.size(); j++){
			cb.addQuadruples(listaVariablesDeFuncion.get(j).getIntermediateCode());
		}
		ArrayList<Sentencia> listaSentencias = listaFunciones.get(i).getListaSentencias();
		for (int j = 0; j < listaSentencias.size(); j++){
			cb.addQuadruples(listaSentencias.get(j).getIntermediateCode());
		}
	}
	Axiom1 axiom = new Axiom1();
	axiom.setIntermediateCode(cb.create());
	RESULT = axiom;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= NT$1 seccionConstantes seccionTipos axiom1 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom1 a = (Axiom1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scopeManager.getCurrentScope());
	cb.addQuadruples(a.getIntermediateCode());
	cb.addQuadruple("HALT");
		cb.addQuadruples(printQuadruplesList);
	AxiomConcreto axiom = new AxiomConcreto();
	axiom.setIntermediateCode(cb.create());
	RESULT = axiom;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Axiom RESULT =null;

	scopeManager.openScope("global");
	scopeManager.getCurrentScope().getTypeTable().addType(new TypeProcedure(scopeManager.getCurrentScope(), "vacio"));
	scopeManager.getCurrentScope().getTypeTable().addType(new TypeSimple(scopeManager.getCurrentScope(), "entero"));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		// Asignar direcciones
		List<QuadrupleIF> listOfQuadruples = ax.getIntermediateCode();
		ExecutionEnvironmentEns2001 executionEnvironmentEns2001 = new ExecutionEnvironmentEns2001();
		List<ScopeIF> scopes = scopeManager.getAllScopes();
		int staticAddress = 0;

		// asignar celdas a variables locales y temporales
		for (ScopeIF scope: scopes) {
			int raAddress = 4;

			List<SymbolIF> symbols = scope.getSymbolTable().getSymbols();
			boolean isStaticScope = true; // ambientes estáticos
			for (SymbolIF symbol: symbols) {
				if (symbol instanceof SymbolVariable) { 
					if (isStaticScope){ 
						((SymbolVariable)symbol).setAddress(staticAddress);
						tryToAssignAddressToOperands(symbol, listOfQuadruples); // sets address to operands that share scope and name
						staticAddress = staticAddress + symbol.getType().getSize();
					} else { // ambientes dinámicos (funciones auxiliares)
						((SymbolVariable)symbol).setAddress(raAddress);
						raAddress = raAddress - symbol.getType().getSize(); 
					}
				} 
			}
		}

		for (ScopeIF scope: scopes) {
			int raAddress = 4;
			List<TemporalIF> temporals = scope.getTemporalTable ().getTemporals();
			boolean isStaticScope = true; // ambientes estáticos
			for (TemporalIF temporal: temporals) {
				if (temporal instanceof Temporal) {
					if (isStaticScope){ // ambientes estáticos
						((Temporal)temporal).setAddress(staticAddress); 
						staticAddress = staticAddress + 1;
					} else { // ambientes dinámicos (funciones auxiliares)
						((Temporal)temporal).setAddress(raAddress); 
						raAddress = raAddress - 1;
					}
				} 
			}
		}

		// Inicializar variables	
		for (ScopeIF scope: scopes) {
			IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
			List<SymbolIF> symbols = scope.getSymbolTable ().getSymbols();
			boolean isStaticScope = true;
			if (isStaticScope) {
				for (SymbolIF symbol: symbols) { 
					if (symbol instanceof SymbolVariable) {
						Variable var = new Variable(symbol.getName(), symbol.getScope());
						var.setAddress(((SymbolVariable)symbol).getAddress());
						cb.addQuadruple("VARSTATIC", var, 0); 
					}
				}
			}
			cb.addQuadruples(ax.getIntermediateCode());
			ax.setIntermediateCode(cb.create());
		}
		
		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
		//printamos el código intermedio generado
		semanticErrorManager.semanticDebug("Codigo intermedio axioma con instruciones para variables: " + ax.getIntermediateCode());
		List intermediateCode = ax.getIntermediateCode ();
		finalCodeFactory.setEnvironment(CompilerContext.getExecutionEnvironment());
		finalCodeFactory.create (intermediateCode);
		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
		// aún no se tendrá implementada la generación de código intermedio ni final.
		// Para la entrega final deberán descomentarse y usarse.
		scopeManager.closeScope();
		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
 
    syntaxErrorManager.syntaxInfo ("Starting parsing...");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

