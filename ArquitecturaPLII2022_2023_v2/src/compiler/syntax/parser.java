
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 15 23:16:30 CEST 2023
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 15 23:16:30 CEST 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\011\002\000\002\060" +
    "\002\000\002\002\004\000\002\061\002\000\002\003\006" +
    "\000\002\004\004\000\002\004\003\000\002\017\004\000" +
    "\002\017\003\000\002\020\006\000\002\021\004\000\002" +
    "\021\003\000\002\022\011\000\002\023\003\000\002\023" +
    "\003\000\002\024\004\000\002\024\003\000\002\025\005" +
    "\000\002\025\005\000\002\027\004\000\002\026\004\000" +
    "\002\026\003\000\002\030\004\000\002\005\003\000\002" +
    "\005\004\000\002\012\004\000\002\012\003\000\002\062" +
    "\002\000\002\063\002\000\002\013\014\000\002\064\002" +
    "\000\002\065\002\000\002\013\014\000\002\006\004\000" +
    "\002\006\005\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\005\000\002\016\004\000\002\016" +
    "\004\000\002\066\002\000\002\007\011\000\002\010\005" +
    "\000\002\010\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\004\000\002\031\004\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\003\000\002\031\003" +
    "\000\002\032\006\000\002\052\004\000\002\033\006\000" +
    "\002\033\005\000\002\053\003\000\002\053\005\000\002" +
    "\067\002\000\002\034\005\000\002\035\005\000\002\035" +
    "\004\000\002\036\004\000\002\036\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\057" +
    "\004\000\002\057\005\000\002\040\005\000\002\041\006" +
    "\000\002\043\006\000\002\042\003\000\002\042\003\000" +
    "\002\044\011\000\002\044\007\000\002\070\002\000\002" +
    "\045\013\000\002\046\004\000\002\046\003\000\002\047" +
    "\010\000\002\050\007\000\002\050\003\000\002\071\002" +
    "\000\002\051\010\000\002\054\007\000\002\072\002\000" +
    "\002\054\010\000\002\055\003\000\002\055\003\000\002" +
    "\056\003\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\014\027\uffff\031\uffff\043\uffff\044\uffff\045" +
    "\uffff\001\002\000\004\002\334\001\002\000\014\027\ufffd" +
    "\031\ufffd\043\ufffd\044\ufffd\045\ufffd\001\002\000\004\002" +
    "\ufffe\001\002\000\014\027\010\031\000\043\000\044\000" +
    "\045\000\001\002\000\004\045\331\001\002\000\014\027" +
    "\010\031\000\043\000\044\000\045\000\001\002\000\012" +
    "\031\000\043\016\044\000\045\000\001\002\000\012\031" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\001\002\000\010\031\036" +
    "\044\034\045\041\001\002\000\030\012\000\031\000\032" +
    "\000\033\000\034\000\035\000\040\000\041\000\043\016" +
    "\044\000\045\000\001\002\000\004\031\020\001\002\000" +
    "\026\012\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\040\ufff5\041\ufff5\044\ufff5\045\ufff5\001\002\000\004\045" +
    "\021\001\002\000\004\010\022\001\002\000\006\045\024" +
    "\046\023\001\002\000\004\011\ufff3\001\002\000\004\011" +
    "\ufff2\001\002\000\004\011\026\001\002\000\004\016\027" +
    "\001\002\000\030\012\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\040\ufff4\041\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\001\002\000\026\012\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\ufffa\001\002\000" +
    "\006\031\326\044\034\001\002\000\006\037\302\045\301" +
    "\001\002\000\010\031\036\044\034\045\041\001\002\000" +
    "\004\045\057\001\002\000\026\012\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0\044\ufff0\045" +
    "\ufff0\001\002\000\004\002\uffe6\001\002\000\004\045\043" +
    "\001\002\000\004\016\055\001\002\000\010\016\000\017" +
    "\000\024\052\001\002\000\006\016\000\017\046\001\002" +
    "\000\004\016\uffed\001\002\000\004\045\043\001\002\000" +
    "\004\016\uffeb\001\002\000\004\016\uffec\001\002\000\006" +
    "\016\uffea\017\uffea\001\002\000\004\046\054\001\002\000" +
    "\006\016\uffe9\017\uffe9\001\002\000\006\016\uffe8\017\uffe8" +
    "\001\002\000\026\012\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\040\uffee\041\uffee\044\uffee\045\uffee\001\002" +
    "\000\004\016\277\001\002\000\012\014\060\016\000\017" +
    "\000\024\052\001\002\000\010\015\000\031\066\045\061" +
    "\001\002\000\004\045\276\001\002\000\006\015\uffdb\017" +
    "\274\001\002\000\004\015\070\001\002\000\004\015\uffdd" +
    "\001\002\000\004\015\uffdc\001\002\000\004\045\067\001" +
    "\002\000\006\015\uffd9\017\uffd9\001\002\000\004\012\uffe2" +
    "\001\002\000\004\012\072\001\002\000\026\012\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1" +
    "\043\uffe1\045\uffe1\001\002\000\026\012\000\031\000\032" +
    "\000\033\000\034\000\035\000\040\000\041\000\043\016" +
    "\045\000\001\002\000\024\012\076\031\121\032\112\033" +
    "\113\034\104\035\122\040\077\041\115\045\117\001\002" +
    "\000\026\012\uffb6\013\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\045\uffb6\001\002\000\024" +
    "\012\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\040" +
    "\uffc1\041\uffc1\045\uffc1\001\002\000\014\014\136\016\262" +
    "\021\145\045\146\046\141\001\002\000\026\012\uffb7\013" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\045\uffb7\001\002\000\024\012\076\031\121\032" +
    "\112\033\113\034\104\035\122\040\077\041\115\045\117" +
    "\001\002\000\006\023\uffab\024\uffab\001\002\000\026\012" +
    "\uffb9\013\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\045\uffb9\001\002\000\004\014\231\001" +
    "\002\000\004\016\230\001\002\000\006\023\222\024\223" +
    "\001\002\000\026\012\uffb2\013\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\040\uffb2\041\uffb2\042\uffb2\045\uffb2\001\002" +
    "\000\026\012\uffba\013\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\040\uffba\041\uffba\042\uffba\045\uffba\001\002\000\024" +
    "\012\uffbc\013\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\040" +
    "\uffbc\041\uffbc\045\uffbc\001\002\000\004\014\214\001\002" +
    "\000\004\014\205\001\002\000\026\012\uffb3\013\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\045\uffb3\001\002\000\004\014\177\001\002\000\026\012" +
    "\uffb4\013\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\045\uffb4\001\002\000\016\005\134\010" +
    "\132\014\133\023\uffac\024\uffac\045\043\001\002\000\026" +
    "\012\uffb5\013\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\045\uffb5\001\002\000\004\045\043" +
    "\001\002\000\004\014\172\001\002\000\006\031\uffe0\044" +
    "\uffe0\001\002\000\026\012\uffb8\013\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\040\uffb8\041\uffb8\042\uffb8\045\uffb8\001" +
    "\002\000\026\012\uffbb\013\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\040\uffbb\041\uffbb\042\uffbb\045\uffbb\001\002\000" +
    "\024\012\076\013\131\032\112\033\113\034\104\035\122" +
    "\040\077\041\115\045\130\001\002\000\024\012\uffbd\013" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\041\uffbd" +
    "\045\uffbd\001\002\000\014\005\134\010\132\014\133\023" +
    "\uffac\024\uffac\001\002\000\006\031\uffdf\044\uffdf\001\002" +
    "\000\012\014\136\021\145\045\146\046\141\001\002\000" +
    "\014\014\136\015\140\021\145\045\146\046\141\001\002" +
    "\000\004\016\135\001\002\000\026\012\uffaf\013\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\045\uffaf\001\002\000\012\014\136\021\145\045\146\046" +
    "\141\001\002\000\026\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\011\uffc9\015\uffc9\016\uffc9\017\uffc9\022\uffc9\025\uffc9\001" +
    "\002\000\026\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\022\uffc4\025\uffc4\001\002\000" +
    "\026\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\022\uffd3\025\uffd3\001\002\000\022\004" +
    "\151\005\155\006\150\007\154\015\uffc3\017\164\022\153" +
    "\025\152\001\002\000\026\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\011\uffc8\015\uffc8\016\uffc8\017\uffc8\022\uffc8\025\uffc8" +
    "\001\002\000\004\015\163\001\002\000\012\014\136\021" +
    "\145\045\146\046\141\001\002\000\032\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\132\011\uffd2\014\133\015\uffd2\016" +
    "\uffd2\017\uffd2\022\uffd2\025\uffd2\001\002\000\026\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\011\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\022\uffcd\025\uffcd\001\002\000\012\014\136\021\145" +
    "\045\146\046\141\001\002\000\012\014\136\021\145\045" +
    "\146\046\141\001\002\000\012\014\136\021\145\045\146" +
    "\046\141\001\002\000\012\014\136\021\145\045\146\046" +
    "\141\001\002\000\012\014\136\021\145\045\146\046\141" +
    "\001\002\000\026\004\uffce\005\uffce\006\uffce\007\uffce\011" +
    "\uffce\015\uffce\016\uffce\017\uffce\022\uffce\025\uffce\001\002" +
    "\000\026\004\151\005\155\006\150\007\uffca\011\uffca\015" +
    "\uffca\016\uffca\017\uffca\022\153\025\152\001\002\000\026" +
    "\004\151\005\155\006\150\007\uffcb\011\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\022\uffcb\025\152\001\002\000\026\004\151" +
    "\005\155\006\150\007\uffcc\011\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\022\uffcc\025\uffcc\001\002\000\026\004\uffd0\005\155" +
    "\006\150\007\uffd0\011\uffd0\015\uffd0\016\uffd0\017\uffd0\022" +
    "\uffd0\025\uffd0\001\002\000\026\004\uffcf\005\155\006\uffcf" +
    "\007\uffcf\011\uffcf\015\uffcf\016\uffcf\017\uffcf\022\uffcf\025" +
    "\uffcf\001\002\000\026\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\011\uffc5\015\uffc5\016\uffc5\017\uffc5\022\uffc5\025\uffc5\001" +
    "\002\000\012\014\136\021\145\045\146\046\141\001\002" +
    "\000\004\015\uffc2\001\002\000\020\004\151\005\155\006" +
    "\150\007\154\015\167\022\153\025\152\001\002\000\026" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\022\uffd1\025\uffd1\001\002\000\020\004\151" +
    "\005\155\006\150\007\154\011\171\022\153\025\152\001" +
    "\002\000\032\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\001\002\000\012\014\136\021\145\045\146\046\141" +
    "\001\002\000\020\004\151\005\155\006\150\007\154\015" +
    "\uffa1\022\153\025\152\001\002\000\004\015\175\001\002" +
    "\000\022\012\076\032\112\033\113\034\104\035\122\040" +
    "\077\041\115\045\130\001\002\000\026\012\uffa0\013\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\045\uffa0\001\002\000\012\014\136\021\145\045\146" +
    "\046\141\001\002\000\020\004\151\005\155\006\150\007" +
    "\154\015\201\022\153\025\152\001\002\000\022\012\076" +
    "\032\112\033\113\034\104\035\122\040\077\041\115\045" +
    "\130\001\002\000\026\012\uffa9\013\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\040\uffa9\041\uffa9\042\203\045\uffa9\001" +
    "\002\000\022\012\076\032\112\033\113\034\104\035\122" +
    "\040\077\041\115\045\130\001\002\000\026\012\uffaa\013" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\045\uffaa\001\002\000\014\014\136\015\000\021" +
    "\145\045\146\046\141\001\002\000\004\015\uff9e\001\002" +
    "\000\020\004\151\005\155\006\150\007\154\015\uff99\022" +
    "\153\025\152\001\002\000\004\015\uff9a\001\002\000\004" +
    "\015\212\001\002\000\004\016\213\001\002\000\026\012" +
    "\uff9d\013\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\045\uff9d\001\002\000\006\015\000\047" +
    "\216\001\002\000\004\015\220\001\002\000\004\015\uff9b" +
    "\001\002\000\004\015\uff9c\001\002\000\004\016\221\001" +
    "\002\000\026\012\uff9f\013\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\040\uff9f\041\uff9f\042\uff9f\045\uff9f\001\002\000" +
    "\012\014\136\021\145\045\146\046\141\001\002\000\012" +
    "\014\136\021\145\045\146\046\141\001\002\000\020\004" +
    "\151\005\155\006\150\007\154\016\225\022\153\025\152" +
    "\001\002\000\026\012\uffae\013\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\040\uffae\041\uffae\042\uffae\045\uffae\001\002" +
    "\000\020\004\151\005\155\006\150\007\154\016\227\022" +
    "\153\025\152\001\002\000\026\012\uffad\013\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\040\uffad\041\uffad\042\uffad\045" +
    "\uffad\001\002\000\026\012\uffc6\013\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\040\uffc6\041\uffc6\042\uffc6\045\uffc6\001" +
    "\002\000\012\014\136\021\145\045\146\046\141\001\002" +
    "\000\020\004\151\005\155\006\150\007\154\015\uffa8\022" +
    "\153\025\152\001\002\000\004\015\234\001\002\000\004" +
    "\012\235\001\002\000\004\026\240\001\002\000\010\013" +
    "\000\026\240\036\247\001\002\000\010\013\uffa5\026\uffa5" +
    "\036\uffa5\001\002\000\004\046\241\001\002\000\004\020" +
    "\242\001\002\000\004\012\076\001\002\000\004\030\244" +
    "\001\002\000\004\016\245\001\002\000\010\013\uffa4\026" +
    "\uffa4\036\uffa4\001\002\000\004\013\256\001\002\000\004" +
    "\020\252\001\002\000\010\013\uffa6\026\uffa6\036\uffa6\001" +
    "\002\000\004\013\uffa2\001\002\000\004\012\076\001\002" +
    "\000\004\030\254\001\002\000\004\016\255\001\002\000" +
    "\004\013\uffa3\001\002\000\026\012\uffa7\013\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\040\uffa7\041\uffa7\042\uffa7\045" +
    "\uffa7\001\002\000\026\012\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\040\ufff1\041\ufff1\044\ufff1\045\ufff1\001" +
    "\002\000\024\012\076\013\261\032\112\033\113\034\104" +
    "\035\122\040\077\041\115\045\130\001\002\000\006\031" +
    "\uffde\044\uffde\001\002\000\026\012\uffb1\013\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\040\uffb1\041\uffb1\042\uffb1\045" +
    "\uffb1\001\002\000\020\004\151\005\155\006\150\007\154" +
    "\016\264\022\153\025\152\001\002\000\026\012\uffb0\013" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\045\uffb0\001\002\000\024\012\076\031\121\032" +
    "\112\033\113\034\104\035\122\040\077\041\115\045\117" +
    "\001\002\000\024\012\076\031\121\032\112\033\113\034" +
    "\104\035\122\040\077\041\115\045\117\001\002\000\030" +
    "\012\uffc0\013\uffc0\030\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0\001\002\000\024" +
    "\012\076\013\271\032\112\033\113\034\104\035\122\040" +
    "\077\041\115\045\130\001\002\000\030\012\uffbe\013\uffbe" +
    "\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\045\uffbe\001\002\000\024\012\076\013\273" +
    "\032\112\033\113\034\104\035\122\040\077\041\115\045" +
    "\130\001\002\000\030\012\uffbf\013\uffbf\030\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\040\uffbf\041\uffbf\042\uffbf\045" +
    "\uffbf\001\002\000\006\031\066\045\061\001\002\000\004" +
    "\015\uffda\001\002\000\006\015\uffd8\017\uffd8\001\002\000" +
    "\026\012\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\040\uffef\041\uffef\044\uffef\045\uffef\001\002\000\004\002" +
    "\ufffb\001\002\000\004\014\315\001\002\000\004\014\303" +
    "\001\002\000\004\015\304\001\002\000\004\012\305\001" +
    "\002\000\024\012\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\040\uffd7\041\uffd7\045\uffd7\001\002\000\024\012" +
    "\076\031\121\032\112\033\113\034\104\035\122\040\077" +
    "\041\115\045\117\001\002\000\024\012\076\031\121\032" +
    "\112\033\113\034\104\035\122\040\077\041\115\045\117" +
    "\001\002\000\004\002\uffd6\001\002\000\024\012\076\013" +
    "\312\032\112\033\113\034\104\035\122\040\077\041\115" +
    "\045\130\001\002\000\004\002\uffd4\001\002\000\024\012" +
    "\076\013\314\032\112\033\113\034\104\035\122\040\077" +
    "\041\115\045\130\001\002\000\004\002\uffd5\001\002\000" +
    "\010\015\000\031\066\045\061\001\002\000\004\015\317" +
    "\001\002\000\004\012\uffe5\001\002\000\004\012\321\001" +
    "\002\000\026\012\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\040\uffe4\041\uffe4\043\uffe4\045\uffe4\001\002\000" +
    "\026\012\000\031\000\032\000\033\000\034\000\035\000" +
    "\040\000\041\000\043\016\045\000\001\002\000\024\012" +
    "\076\031\121\032\112\033\113\034\104\035\122\040\077" +
    "\041\115\045\117\001\002\000\006\031\uffe3\044\uffe3\001" +
    "\002\000\004\002\uffe7\001\002\000\004\045\327\001\002" +
    "\000\004\014\060\001\002\000\012\031\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\001\002\000\004\046\332\001\002\000\004" +
    "\016\333\001\002\000\014\027\ufff7\031\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\002\003\060\004\001\001\000\002\001" +
    "\001\000\006\003\005\061\006\001\001\000\002\001\001" +
    "\000\010\011\012\017\011\020\010\001\001\000\002\001" +
    "\001\000\010\011\012\017\327\020\010\001\001\000\010" +
    "\011\016\021\013\022\014\001\001\000\002\001\001\000" +
    "\016\004\030\007\037\012\031\013\032\024\034\025\036" +
    "\001\001\000\010\011\016\021\027\022\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\037\012\324\013\032\001\001\000\002" +
    "\001\001\000\012\007\037\012\277\013\032\025\256\001" +
    "\001\000\006\027\055\030\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\041\030\043\001\001\000" +
    "\002\001\001\000\006\005\050\011\052\001\001\000\006" +
    "\011\046\026\044\001\001\000\002\001\001\000\006\027" +
    "\047\030\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\050\011\052\001\001\000\012\011\064\014\062\015" +
    "\063\016\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\070\001\001" +
    "\000\002\001\001\000\004\065\072\001\001\000\010\011" +
    "\016\021\073\022\014\001\001\000\046\006\122\024\100" +
    "\025\036\032\101\033\104\034\106\036\125\037\110\040" +
    "\107\041\102\042\105\043\123\044\077\045\074\051\117" +
    "\052\115\054\113\057\124\001\001\000\002\001\001\000" +
    "\004\067\264\001\001\000\010\031\262\032\136\033\142" +
    "\001\001\000\002\001\001\000\042\025\256\032\101\033" +
    "\104\034\106\036\257\037\110\040\107\041\102\042\105" +
    "\043\123\044\077\045\074\051\117\052\115\054\113\057" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\041\030\043\001\001\000\002" +
    "\001\001\000\006\027\055\030\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\032\101\033\104\034\106\037\126\040\107\041" +
    "\102\042\105\043\123\044\077\045\074\051\117\052\115" +
    "\054\113\057\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\167\032\136\033\142" +
    "\001\001\000\012\031\141\032\136\033\142\053\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\165" +
    "\032\136\033\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\146\032\136\033\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\161" +
    "\032\136\033\142\001\001\000\010\031\160\032\136\033" +
    "\142\001\001\000\010\031\157\032\136\033\142\001\001" +
    "\000\010\031\156\032\136\033\142\001\001\000\010\031" +
    "\155\032\136\033\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\141" +
    "\032\136\033\142\053\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\172\032\136\033\142\001\001\000" +
    "\004\071\173\001\001\000\002\001\001\000\036\032\101" +
    "\033\104\034\106\037\175\040\107\041\102\042\105\043" +
    "\123\044\077\045\074\051\117\052\115\054\113\057\124" +
    "\001\001\000\002\001\001\000\010\031\177\032\136\033" +
    "\142\001\001\000\002\001\001\000\036\032\101\033\104" +
    "\034\106\037\201\040\107\041\102\042\105\043\123\044" +
    "\077\045\074\051\117\052\115\054\113\057\124\001\001" +
    "\000\002\001\001\000\036\032\101\033\104\034\106\037" +
    "\203\040\107\041\102\042\105\043\123\044\077\045\074" +
    "\051\117\052\115\054\113\057\124\001\001\000\002\001" +
    "\001\000\014\011\207\031\206\032\136\033\142\056\205" +
    "\001\001\000\004\072\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\216\055\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\225\032\136\033\142\001" +
    "\001\000\010\031\223\032\136\033\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\231\032\136\033\142" +
    "\001\001\000\004\070\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\235\047\236\001\001\000\010" +
    "\011\250\047\247\050\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\032\101\033\104\034\106\037\126\040" +
    "\107\041\102\042\105\043\123\044\077\045\074\051\117" +
    "\052\115\054\113\057\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\024\265\025\036\032\101\033\104\034\106\035\266\036" +
    "\267\037\110\040\107\041\102\042\105\043\123\044\077" +
    "\045\074\051\117\052\115\054\113\057\124\001\001\000" +
    "\042\025\256\032\101\033\104\034\106\036\271\037\110" +
    "\040\107\041\102\042\105\043\123\044\077\045\074\051" +
    "\117\052\115\054\113\057\124\001\001\000\002\001\001" +
    "\000\036\032\101\033\104\034\106\037\126\040\107\041" +
    "\102\042\105\043\123\044\077\045\074\051\117\052\115" +
    "\054\113\057\124\001\001\000\002\001\001\000\036\032" +
    "\101\033\104\034\106\037\126\040\107\041\102\042\105" +
    "\043\123\044\077\045\074\051\117\052\115\054\113\057" +
    "\124\001\001\000\002\001\001\000\006\015\274\016\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\305\001" +
    "\001\000\046\010\307\024\306\025\036\032\101\033\104" +
    "\034\106\036\310\037\110\040\107\041\102\042\105\043" +
    "\123\044\077\045\074\051\117\052\115\054\113\057\124" +
    "\001\001\000\042\025\256\032\101\033\104\034\106\036" +
    "\312\037\110\040\107\041\102\042\105\043\123\044\077" +
    "\045\074\051\117\052\115\054\113\057\124\001\001\000" +
    "\002\001\001\000\036\032\101\033\104\034\106\037\126" +
    "\040\107\041\102\042\105\043\123\044\077\045\074\051" +
    "\117\052\115\054\113\057\124\001\001\000\002\001\001" +
    "\000\036\032\101\033\104\034\106\037\126\040\107\041" +
    "\102\042\105\043\123\044\077\045\074\051\117\052\115" +
    "\054\113\057\124\001\001\000\002\001\001\000\012\011" +
    "\064\014\315\015\063\016\061\001\001\000\002\001\001" +
    "\000\004\062\317\001\001\000\002\001\001\000\004\063" +
    "\321\001\001\000\010\011\016\021\322\022\014\001\001" +
    "\000\046\006\323\024\100\025\036\032\101\033\104\034" +
    "\106\036\125\037\110\040\107\041\102\042\105\043\123" +
    "\044\077\045\074\051\117\052\115\054\113\057\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();

	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}

	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	public SymbolIF checkIfExistsSymbolWithinOpenScopes (Token token, boolean iWantIt){
		if (iWantIt && !scopeManager.containsSymbol(token.getLexema())){
			semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " no declarado");
		} else if (!iWantIt && scopeManager.containsSymbol(token.getLexema())){
			semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " ya declarado");
		} else if (iWantIt && scopeManager.containsSymbol(token.getLexema())){
			return scopeManager.searchSymbol(token.getLexema());
		}
		return null;
	}

	public TypeIF checkIfExistsTypeWithinOpenScopes (Token token, boolean iWantIt){
		if (iWantIt && !scopeManager.containsType(token.getLexema())){
			semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " no declarado");
		} else if (!iWantIt && scopeManager.containsType(token.getLexema())){
			semanticErrorManager.semanticFatalError("Linea " + token.getLine() + " Columna " + token.getColumn() + " identificador " + token.getLexema() + " ya declarado");
		} else if (iWantIt && scopeManager.containsType(token.getLexema())){
			return scopeManager.searchType(token.getLexema());
		}
		return null;
	}

	public void checkIfContainsReturn(ArrayList<Sentencia> list, String line){
		for (int i = 0; i < list.size(); i++){
			if (list.get(i).getType().contains("DEVUELVE")){
				return;
			}
		}
		semanticErrorManager.semanticFatalError("Linea " + line + " falta sentencia devuelve");
	}

	public void checkIfReturnTypesMatch(ArrayList<Sentencia> list, String type, String line){
		for (int i = 0; i < list.size(); i++){
			if (list.get(i).getType().contains("DEVUELVE")){
				if (!list.get(i).getType().contains(type)){
					semanticErrorManager.semanticFatalError("Linea " + line + " tipo de funcion " + type + " no coincide con tipo de retorno " + list.get(i).getType());
				}
			}
		}
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opcionesEscribeEnt ::= expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opcionesEscribeEnt ::= epsilon 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opcionesEscribe ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opcionesEscribe ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentenciaSalida ::= ESCRIBE_ENT OPEN_KEY opcionesEscribeEnt NT$10 CLOSE_KEY SEMI_COLON 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$10 ::= 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " la expresion no se puede evaluar a 0 o u otro entero");
	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentenciaSalida ::= ESCRIBE OPEN_KEY opcionesEscribe CLOSE_KEY SEMI_COLON 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentenciaMientras ::= MIENTRAS OPEN_KEY expresion NT$9 CLOSE_KEY sentencia 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$9 ::= 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " la expresion no se puede evaluar a 0 o u otro entero");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // porDefecto ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // porDefecto ::= PORDEFECTO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // casoAlt ::= CASO NUMERO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // casosAlternativa ::= casoAlt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // casosAlternativa ::= casosAlternativa casoAlt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaAlternativas ::= ALTENATIVAS OPEN_KEY expresion NT$8 CLOSE_KEY OPEN_PARENTHESIS casosAlternativa porDefecto CLOSE_PARENTHESIS 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$8 ::= 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " la expresion no se puede evaluar a un entero");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " expresion no se puede evaluar a 0 o u otro entero");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia SINO sentencia 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " expresion no se puede evaluar a 0 o u otro entero");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ref ::= accesoVector 
            {
              String RESULT =null;
		
	RESULT = "entero";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ref ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	if (!mySymbol.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " el objeto " + id.getLexema() + " no es de tipo entero");
	}
	RESULT = mySymbol.getType().getName();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaAsignacionSuma ::= ref ASSIGN_SUMA expresion SEMI_COLON 
            {
              Sentencia RESULT =null;
		int typeOfRefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeOfRefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String typeOfRef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (!e.getType().getName().equals(typeOfRef)){
		semanticErrorManager.semanticFatalError("Linea " + a.getLine() + " no se puede añadir un " + e.getType().getName() + " a un " + typeOfRef);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionSuma",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaAsignacion ::= ref ASSIGN expresion SEMI_COLON 
            {
              Sentencia RESULT =null;
		int typeOfRefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeOfRefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String typeOfRef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (!e.getType().getName().equals(typeOfRef)){
		semanticErrorManager.semanticFatalError("Linea " + a.getLine() + " no se puede asignar un " + e.getType().getName() + " a un " + typeOfRef);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaIncremento ::= IDENTIFICADOR AUTO_INCREMENTO SEMI_COLON 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	if (!mySymbol.getType().getName().equals("entero")) {
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " +id.getColumn() + " no se puede aplicar autoincremento a objeto no de tipo entero");
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIncremento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaDevuelve ::= DEVUELVE expresion SEMI_COLON 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
	Sentencia sentencia = new Sentencia ("DEVUELVE_" + e.getType().getName());
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaDevuelve ::= DEVUELVE SEMI_COLON 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("DEVUELVE_VACIO");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= bloque 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("BLOQUE");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia ::= sentenciaSalida 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("SALIDA");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("LLAMADAFUNCION");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= sentenciaMientras 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("MIENTRAS");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= sentenciaAlternativas 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("ALTERNATIVAS");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= sentenciaSi 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("SI");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= sentenciaAsignacionSuma 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("ASIGNACIONSUMA");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= sentenciaAsignacion 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("ASIGNACION");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= sentenciaIncremento 
            {
              Sentencia RESULT =null;
		
	Sentencia sentencia = new Sentencia ("INCREMENTO");
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= sentenciaDevuelve 
            {
              Sentencia RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia sentencia = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listadoSentencias ::= sentencia 
            {
              ArrayList<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Sentencia> list= new ArrayList<Sentencia>();
	list.add(s);
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listadoSentencias ::= listadoSentencias sentencia 
            {
              ArrayList<Sentencia> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	list.add(s);
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloque1 ::= listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		
	scopeManager.closeScope();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloque1 ::= seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		
	scopeManager.closeScope();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque ::= OPEN_PARENTHESIS NT$7 bloque1 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$7 ::= 
            {
              Sentencia RESULT =null;

	scopeManager.openScope();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros ::= expresion COLON parametros 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> list = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	list.add(e);
	RESULT = list;	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros ::= expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Expresion> list = new ArrayList<Expresion>();
	list.add(e);
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY CLOSE_KEY 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	Class<?> classOfSymbol = mySymbol.getClass();
	if (classOfSymbol != SymbolFunction.class && classOfSymbol != SymbolProcedure.class){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " identificador " + mySymbol.getName() + " no es una funcion");
	}
	ArrayList<Parametro> listaOriginal = new ArrayList();
	if (classOfSymbol == SymbolFunction.class){
		listaOriginal = ((SymbolFunction)mySymbol).getParameters();
	} else {
		listaOriginal = ((SymbolProcedure)mySymbol).getParameters();
	}
	ArrayList<Parametro> list = new ArrayList<Parametro>();
	if (listaOriginal.size() != list.size()){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " funcion " + mySymbol.getName() + " parametros esperados " + listaOriginal.size() + " parametros obtenidos " + list.size());
	}
	RESULT = id.getLexema();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY parametros CLOSE_KEY 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> list = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	Class<?> classOfSymbol = mySymbol.getClass();
	if (classOfSymbol != SymbolFunction.class && classOfSymbol != SymbolProcedure.class){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " identificador " + mySymbol.getName() + " no es una funcion");
	}
	ArrayList<Parametro> listaOriginal = new ArrayList();
	if (classOfSymbol == SymbolFunction.class){
		listaOriginal = ((SymbolFunction)mySymbol).getParameters();
	} else {
		listaOriginal = ((SymbolProcedure)mySymbol).getParameters();
	}
	if (listaOriginal.size() != list.size()){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " funcion " + mySymbol.getName() + " parametros esperados " + listaOriginal.size() + " parametros obtenidos " + list.size());
	}
	for (int i = 0; i < list.size(); i++){
		if (!list.get(i).getType().getName().equals(listaOriginal.get(i).getType().getName())){
			semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " funcion " + mySymbol.getName() + " parametro " + (list.size() - i) + " tipo esperado " + listaOriginal.get(i).getType().getName() + " tipo obtenido " + list.get(i).getType().getName());
		}
	}
	RESULT = id.getLexema();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentenciaLlamadaFuncion ::= llamadaFuncion SEMI_COLON 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaLlamadaFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // accesoVector ::= IDENTIFICADOR OPEN_BRACKET expresion CLOSE_BRACKET 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " expresion indice debe ser de tipo int");
	}
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	Class<?> classOfType = mySymbol.getType().getClass();
	if (classOfType != TypeArray.class){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " identificador " + mySymbol.getName() + " no es un vector");
	}
	if (!e.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " identificador " + mySymbol.getName() + " no es un vector");
	}
	if (e.getSubType().equals("constante")){
		int maxLength = ((TypeArray)mySymbol.getType()).getLength();
		int index = (int)e.getValue();
		if (index < 0 || index >= maxLength){
			semanticErrorManager.semanticFatalError("Linea " + id.getLine() + " Columna " + id.getColumn() + " expresion con valor " + index +" fuera de rango 0-" + maxLength);
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= llamadaFuncion 
            {
              Expresion RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	SymbolIF mySymbol = scopeManager.searchSymbol(name);
	Expresion e = new Expresion(mySymbol.getType(), "variable", null);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;
		
	Expresion e = new Expresion(scopeManager.searchType("entero"), "variable", null);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion AND_LOGICA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
	}
	String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
	Object value;
	if (subTipo.equals("constante")){
		value = Integer.parseInt(a.getValue().toString()) < Integer.parseInt(b.getValue().toString()) ? 1 : 0;
	} else {
		value = null;
	}
	Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion EQUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
	}
	String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
	Object value;
	if (subTipo.equals("constante")){
		value = Integer.parseInt(a.getValue().toString()) == Integer.parseInt(b.getValue().toString()) ? 1 : 0;
	} else {
		value = null;
	}
	Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion LOWER_THAN expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
	}
	String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
	Object value;
	if (subTipo.equals("constante")){
		value = Integer.parseInt(a.getValue().toString()) < Integer.parseInt(b.getValue().toString()) ? 1 : 0;
	} else {
		value = null;
	}
	Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= NEGACION expresion 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (!a.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresion debe ser de tipo int");
	}
	String subTipo = a.getSubType().equals("constante") ? "constante" : "variable";
	Object value;
	if (subTipo.equals("constante")){
		value = Integer.parseInt(a.getValue().toString()) == 0 ? 1 : 0;
	} else {
		value = null;
	}
	Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion AUTO_INCREMENTO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (!a.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresion debe ser de tipo int");
	}
	String subTipo = a.getSubType().equals("constante") ? "constante" : "variable";
	Object value = subTipo.equals("constante") ? Integer.parseInt(a.getValue().toString()) + 1 : null;
	Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MULT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
	}
	String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
	Object value = subTipo.equals("constante") ? Integer.parseInt(a.getValue().toString()) * Integer.parseInt(b.getValue().toString()) : null;
	Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion PLUS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (!a.getType().getName().equals("entero") || !b.getType().getName().equals("entero")){
		semanticErrorManager.semanticFatalError("Linea " + p.getLine() + " Columna " + p.getColumn() + " expresiones deben ser de tipo int");
	}
	String subTipo = a.getSubType().equals("constante") && b.getSubType().equals("constante") ? "constante" : "variable";
	Object value = subTipo.equals("constante") ? Integer.parseInt(a.getValue().toString()) + Integer.parseInt(b.getValue().toString()) : null;
	Expresion e = new Expresion(scopeManager.searchType("entero"), subTipo, value);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= OPEN_KEY expresion CLOSE_KEY 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	SymbolIF mySymbol = checkIfExistsSymbolWithinOpenScopes(id, true);
	String subTipo = mySymbol.getClass() == SymbolConstant.class ? "constante" : "variable";
	Object value = subTipo.equals("constante") ? ((SymbolConstant)mySymbol).getValue() : null;
	Expresion e = new Expresion(mySymbol.getType(), subTipo, value);
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= NUMERO 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Expresion e = new Expresion(scopeManager.searchType("entero"), "constante", Integer.parseInt(n.getLexema()));
	RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcionPrincipal1 ::= listadoSentencias CLOSE_PARENTHESIS 
            {
              ArrayList<Sentencia> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	scopeManager.closeScope();
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funcionPrincipal1 ::= seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              ArrayList<Sentencia> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	scopeManager.closeScope();
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS NT$6 funcionPrincipal1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	checkIfContainsReturn(list, Integer.toString(p.getLine()));
	checkIfReturnTypesMatch(list, "VACIO", Integer.toString(p.getLine()));
	SymbolProcedure newSymbol = new SymbolProcedure(scopeManager.getCurrentScope(), p.getLexema(), scopeManager.searchType("vacio"), new ArrayList<Parametro>());
	scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$6 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

	scopeManager.openScope("main");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	TypeIF type = checkIfExistsTypeWithinOpenScopes(identifier, true);
	Parametro param = new Parametro(type, name.getLexema());
	RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametro ::= ENTERO IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Parametro param = new Parametro(scopeManager.searchType("entero"), name.getLexema());
	RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionParametros ::= parametro COLON declaracionParametros 
            {
              ArrayList<Parametro> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	params.add(param);
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionParametros ::= parametro 
            {
              ArrayList<Parametro> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Parametro> params = new ArrayList();
	params.add(param);
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // seccionParametros ::= epsilon 
            {
              ArrayList<Parametro> RESULT =null;
		
	ArrayList<Parametro> params = new ArrayList();
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // seccionParametros ::= declaracionParametros 
            {
              ArrayList<Parametro> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = params;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcion1 ::= seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              ArrayList<Sentencia> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	checkIfContainsReturn(list, Integer.toString(p.getLine()));
	scopeManager.closeScope();
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion1 ::= listadoSentencias CLOSE_PARENTHESIS 
            {
              ArrayList<Sentencia> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	checkIfContainsReturn(list, Integer.toString(p.getLine()));
	scopeManager.closeScope();
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion ::= ENTERO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY NT$4 OPEN_PARENTHESIS NT$5 seccionTipos funcion1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	checkIfReturnTypesMatch(list, "entero", Integer.toString(identifier.getLine()));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

	scopeManager.openScope();
	for (int i = 0; i < params.size(); i++){
		TypeIF type = params.get(i).getType();
		SymbolParameter<?> newSymbol = new SymbolParameter<>(scopeManager.getCurrentScope(), params.get(i).getName(), params.get(i).getType(), null);
		scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

	checkIfExistsSymbolWithinOpenScopes(identifier, false);
	SymbolFunction newSymbol = new SymbolFunction(scopeManager.getCurrentScope(), identifier.getLexema(), scopeManager.searchType("entero"), params);
	scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion ::= VACIO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY NT$2 OPEN_PARENTHESIS NT$3 seccionTipos funcion1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Sentencia> list = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	checkIfReturnTypesMatch(list, "VACIO", Integer.toString(identifier.getLine()));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

	scopeManager.openScope();
	for (int i = 0; i < params.size(); i++){
		TypeIF type = params.get(i).getType();
		SymbolParameter<?> newSymbol = new SymbolParameter<>(scopeManager.getCurrentScope(), params.get(i).getName(), params.get(i).getType(), null);
		scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);
	}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

	checkIfExistsSymbolWithinOpenScopes(identifier,  false);
	SymbolProcedure newSymbol = new SymbolProcedure(scopeManager.getCurrentScope(), identifier.getLexema(), scopeManager.searchType("vacio"), params);
	scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // seccionFunciones ::= funcionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // seccionFunciones ::= funcion seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id1 ::= ASSIGN NUMERO 
            {
              Id1 RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Id1 declaration = new Id1(true, Integer.parseInt(n.getLexema()));
	RESULT = declaration;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id1 ::= epsilon 
            {
              Id1 RESULT =null;
		
	Id1 declaration = new Id1(false, 0);
	RESULT = declaration;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id ::= IDENTIFICADOR id1 
            {
              Id RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id1 declaration = (Id1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	checkIfExistsSymbolWithinOpenScopes(identifier, false);
	Id fullDeclaration = new Id (identifier.getLexema(), declaration.hasAssignmentValue(), declaration.getValue());
	RESULT = fullDeclaration;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listadoIDs1 ::= epsilon 
            {
              ArrayList<Id> RESULT =null;
		
	ArrayList<Id> emptyList = new ArrayList();
	RESULT = emptyList;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listadoIDs1 ::= COLON listadoIDs 
            {
              ArrayList<Id> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIDs ::= id listadoIDs1 
            {
              ArrayList<Id> RESULT =null;
		int fullDeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fullDeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Id fullDeclaration = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int restOfDeclarationsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restOfDeclarationsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Id> restOfDeclarations = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	restOfDeclarations.add(fullDeclaration);
	RESULT = restOfDeclarations;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVariable ::= IDENTIFICADOR listadoIDs SEMI_COLON 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	TypeIF type = checkIfExistsTypeWithinOpenScopes(identifier, true);
	for (int i = 0; i < list.size(); i++){
		if (list.get(i).hasAssignmentValue()){ // if is being tried to be assigned
			semanticErrorManager.semanticFatalError("Linea " + identifier.getLine() + " " + list.get(i).getName() + " no puede ser inicializado");
		}
		SymbolVariable<ArrayList> newSymbol = new SymbolVariable(scopeManager.getCurrentScope(), list.get(i).getName(), type, null);
		scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= ENTERO listadoIDs SEMI_COLON 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Id> list = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	for (int i = 0; i < list.size(); i++){
		SymbolVariable<Integer> newSymbol = list.get(i).hasAssignmentValue() ?
			new SymbolVariable(scopeManager.getCurrentScope(), list.get(i).getName(), scopeManager.searchType("entero"), list.get(i).getValue()) :
			new SymbolVariable(scopeManager.getCurrentScope(), list.get(i).getName(), scopeManager.searchType("entero"), null);
		scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seccionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tamTipo ::= IDENTIFICADOR 
            {
              TamTipo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	SymbolIF symbol = checkIfExistsSymbolWithinOpenScopes(s, true);
	if (!symbol.getType().getName().equals("entero")){ // if it exists but it is not an integer
		semanticErrorManager.semanticFatalError("Linea " + s.getLine() + " Columna " + s.getColumn() + " objeto " + s.getLexema() + " no es de tipo entero");
	}
	String value = ((SymbolConstant)symbol).getValue().toString();
	if (Integer.parseInt(value) <= 0){ // if it exists and it is an integer but it is not positive
		semanticErrorManager.semanticFatalError("Linea " + s.getLine() + " Columna " + s.getColumn() + " valor " + s.getLexema() + " fuera del rango");
	}
	TamTipo tamTipo = new TamTipo(((SymbolConstant)symbol).getValue().toString());
	RESULT = tamTipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tamTipo ::= NUMERO 
            {
              TamTipo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (Integer.parseInt(n.getLexema()) <= 0){ // if it is not positive
		semanticErrorManager.semanticFatalError("Linea " + n.getLine() + " Columna " + n.getColumn() + " valor " + n.getLexema() + " fuera del rango");
	}
	TamTipo tamTipo = new TamTipo(n.getLexema());
	RESULT = tamTipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionTipo ::= TIPO ENTERO IDENTIFICADOR OPEN_BRACKET tamTipo CLOSE_BRACKET SEMI_COLON 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token identifier = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamTipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamTiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TamTipo tamTipo = (TamTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	checkIfExistsTypeWithinOpenScopes(identifier, false);
	TypeArray typeArray = new TypeArray(scopeManager.getCurrentScope(), identifier.getLexema(), Integer.parseInt(tamTipo.getValue()));
	scopeManager.getCurrentScope().getTypeTable().addType(typeArray);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionTipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionTipos ::= declaracionTipo seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= CONSTANTE IDENTIFICADOR NUMERO SEMI_COLON 
            {
              DeclaracionConstante RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	checkIfExistsSymbolWithinOpenScopes(name, false);
	SymbolConstant<Integer> newSymbol = new SymbolConstant<Integer>(scopeManager.getCurrentScope(), name.getLexema(), scopeManager.searchType("entero"), Integer.parseInt(value.getLexema()));
	scopeManager.getCurrentScope().getSymbolTable().addSymbol(newSymbol);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccionConstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccionConstantes ::= declaracionConstante seccionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // axiom1 ::= seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom1 ::= seccionVariables seccionFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= NT$1 seccionConstantes seccionTipos axiom1 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Axiom RESULT =null;

	scopeManager.openScope("global");
	scopeManager.getCurrentScope().getTypeTable().addType(new TypeSimple(scopeManager.getCurrentScope(), "vacio"));
	scopeManager.getCurrentScope().getTypeTable().addType(new TypeSimple(scopeManager.getCurrentScope(), "entero"));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
		
		//List intermediateCode = ax.getIntermediateCode ();
		//finalCodeFactory.create (intermediateCode);

		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
		// aún no se tendrá implementada la generación de código intermedio ni final.
		// Para la entrega final deberán descomentarse y usarse.
		List<ScopeIF> scopesList = scopeManager.getAllScopes(); // for debugging purposes
		for (int j = 0; j < scopesList.size(); j++){
			ScopeIF current = scopesList.get(j);
			List myList = new ArrayList<TypeIF>(current.getTypeTable().getTypes());
			for (int i = 0; i < myList.size(); i++){
				System.out.println(myList.get(i));
			}
			List myList2 = new ArrayList<SymbolIF>(current.getSymbolTable().getSymbols()); 
			for (int i = 0; i < myList2.size(); i++){
				System.out.println(myList2.get(i));
			}
		}
		scopeManager.closeScope();
		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
 
    syntaxErrorManager.syntaxInfo ("Starting parsing...");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

